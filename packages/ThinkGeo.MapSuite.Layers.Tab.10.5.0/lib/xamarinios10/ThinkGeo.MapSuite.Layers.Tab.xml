<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkGeo.MapSuite.Layers.Tab</name>
    </assembly>
    <members>
        <member name="M:ThinkGeo.MapSuite.Layers.CplConv.CPLFGets(System.String,System.Int32,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads in at most one less than nBufferSize characters from the fp
            stream and stores them into the buffer pointed to by pszBuffer.
            Reading stops after an EOF or a newline. If a newline is read, it
            is _not_ stored into the buffer. A '\0' is stored after the last
            character in the buffer. All three types of newline terminators
            recognized by the CPLFGets(): single '\r' and '\n' and '\r\n'
            combination.
            </summary>
            <param name="pszBuffer">pszBuffer pointer to the targeting character buffer.</param>
            <param name="nBufferSize">nBufferSize maximum size of the string to read (not including termonating '\0').</param>
            <param name="fp">file stream to read from.</param>
            <returns>the pszBuffer containing a string read</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CplConv.CPLReadLineBuffer(System.Int32)">
            <summary>
            Fetch readline buffer, and ensure it is the desired size,
            reallocating if needed.  Manages TLS (thread local storage)
            issues for the buffer.
            </summary>
            <param name="nRequiredSize">require allocated memory size</param>
            <returns>the string of formed</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CplConv.CPLReadLine(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Simplified line reading from text file.
            </summary>
            <param name="fp">FileStream opened with VSIFOpen().</param>
            <returns>an public buffer containing a line of text read from the file or NULL if the end of file was encountered.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CplConv.CPLScanLong(System.String,System.Int32)">
            <summary>
            Scan up to a maximum number of characters from a string and convert the result to a long.
            </summary>
            <param name="pszString">containing characters to be scanned.</param>
            <param name="nMaxLength">
            The maximum number of character to consider as part
            of the number. Less characters will be considered if a null character
            is encountered.
            </param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CplConv.CPLGetConfigOption(System.String,System.String)">
            <summary>
            Get the value according to the Key
            </summary>
            <param name="pszKey">the value's key</param>
            <param name="pszDefault">the default value</param>
            <returns>the value of the key</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLDefaultErrorHandler(ThinkGeo.MapSuite.Layers.CPLErrEnum,System.Int32,System.String)">
            <summary>
            The default error handler for error debug
            </summary>
            <param name="eErrClass">Error Type</param>
            <param name="nError">Error detail</param>
            <param name="pszErrorMsg">Error message</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLGetErrorContext">
            <summary>
            Get the context of the error
            </summary>
            <returns>Error context</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLError(ThinkGeo.MapSuite.Layers.CPLErrEnum,System.Int32,System.String,System.Object[])">
            <summary>
            The function is a jacket which is package the CPLErrorV function
            </summary>
            <param name="eErrClass">error type</param>
            <param name="err_no">error No</param>
            <param name="fmt">the style of the format string</param>
            <param name="valist">variable parameters</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLErrorV(ThinkGeo.MapSuite.Layers.CPLErrEnum,System.Int32,System.String,System.Object[])">
            <summary>
            Get error message and set error debug
            </summary>
            <param name="eErrClass">error type</param>
            <param name="err_no">error No</param>
            <param name="fmt">the style of the error format</param>
            <param name="valist">variable parameters</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLDebug(System.String,System.String,System.Object[])">
            <summary>
            Display a debugging message.
            </summary>
            <param name="pszCategory">name of the debugging message category</param>
            <param name="pszFormat">printf style format string for message to display</param>
            <param name="list">another parameters</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLErrorReset">
            <summary>
            Reset the error object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLGetLastErrorNo">
            <summary>
            Get the last error No.
            </summary>
            <returns>the last error No.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass.CPLGetLastErrorType">
            <summary>
            Get the last error type
            </summary>
            <returns>the last error type</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLErrorClass._CPLAssert(System.String,System.String,System.Int32)">
            <summary>
            Get the last error message
            </summary>
            <returns>the last error message</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLAddString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Append a string to a StringList and return a pointer to the modified StringList
            </summary>
            <param name="papszStrList">Original string list</param>
            <param name="pszNewString">Adding string</param>
            <returns>New string list</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLCount(System.Collections.Generic.List{System.String})">
            <summary>
            Get string list's item count
            </summary>
            <param name="papszStrList">string list</param>
            <returns>the number of the string items</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLGetField(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Fetches the indicated field, being careful not to crash if
            the field doesn't exist within this string list.  The
            returned pointer should not be freed, and doesn't
            necessarily last long.
            </summary>
            <param name="papszStrList">string list</param>
            <param name="iField">field name</param>
            <returns>result string</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLFetchNameValue(System.Collections.Generic.List{System.String},System.String)">
             <summary>
             In a StringList of "Name=Value" pairs, look for the
            first value associated with the specified name.  The search is not
            case sensitive.
             </summary>
             <param name="papszStrList">string list</param>
             <param name="pszName">the name of string list</param>
             <returns>match string of the name</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLDestroy(System.Collections.Generic.List{System.String})">
            <summary>
            Free all memory used by a StringList
            </summary>
            <param name="papszStrList">Will be destroied array of string</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.CPLString.CSLFindString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Duplicate a string array to a new string array
            </summary>
            <param name="papszStrList">the string which is required to duplicate</param>
            <returns>the new string</returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.GlobalFunction">
            <summary>
            This class contains functions which are global
            in the C++ Source File;
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.GlobalFunction.strlen(System.Char[])">
            <summary>
            Get the content length of the char
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.GlobalFunction.TAB_GEOM_GET_VERSION(System.Int32)">
            <summary>
            Get the version of object type returns an
            integer indicates the type
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.GlobalFunction.TAB_REGION_PLINE_REQUIRES_V800(System.Int32,System.Int32)">
            <summary>
            Use this macro to test whether the number of segments and vertices
            in this object exceeds the V450/650 limits and requires a V800 object
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.GlobalVariable">
            <summary>
            Variable below mainly comes
            from the C++ Header file mitab.h
            or miab_priv.h
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTIntegerList">
            Simple 32bit integer 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTReal">
            List of 32bit integers 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTRealList">
            Double Precision floating point 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTString">
            List of doubles 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTStringList">
            String of ASCII chars 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTWideString">
            Array of strings 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTWideStringList">
            Double byte string (unsupported) 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTBinary">
            List of wide strings (unsupported) 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTDate">
            Raw Binary data 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTTime">
            Date 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.OFTDateTime">
            Time 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.GlobalVariable.TABMAP_TOOL_PEN">
            Date and Time 
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.IMapInfoFile">
             <summary>
            Virtual base class for the TABFile and MIFFile classes.
            This is the definition of the public interface methods that should
            be available for any type of MapInfo dataset.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.SmartOpen(System.String,System.Boolean,System.Text.Encoding)">
             <summary>
            Use this static method to automatically open any flavour of MapInfo
            dataset.  This method will detect the file type, create an object
            of the right type, and open the file.
            Call GetFileClass() on the returned object if you need to find out
            its exact type.  (To access format-specific methods for instance)
             </summary>
             <param name="pszFname"></param>
             <param name="bTestOpenNoError"></param>
             <returns>Returns the new object ptr. , or null if the open failed.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.GetFeatureCount(System.Boolean)">
            <summary>
            OGR methods for read support
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.GetNextFeature">
             <summary>
            Standard OGR GetNextFeature implementation.  This methode is used
            to retreive the next OGRFeature.
             </summary>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.GetFeature(System.Int64)">
             <summary>
            Standard OGR GetFeature implementation.  This methode is used
            to get the wanted (nFeatureId) feature, a null value will be
            returned on error.
             </summary>
             <param name="nFeatureId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.CreateFeature(ThinkGeo.MapSuite.Layers.OGRFeature)">
             <summary>
            Standard OGR CreateFeature implementation.  This methode is used
            to create a new feature in current dataset
             </summary>
             <param name="poFeature"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.GetNextFeatureId(System.Int32)">
            <summary>
            Read access specific stuff
            </summary>
            <param name="nPrevId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Write access specific stuff
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.IMapInfoFile.SetSpatialRef(ThinkGeo.MapSuite.Layers.OGRSpatialReference1)">
            <summary>
            Create a native field based on a generic OGR definition.
            </summary>
            <param name="poField">OGRFieldDefn</param>
            <param name="bApproxOK">Boolean</param>
            <returns>OGRErr message</returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.MapInfoBoundsInfo">
            <summary>
            The following are used for coordsys bounds lookup
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.MIDDATAFile">
            <summary>
            Class to handle a file pointer with a copy of the latest readed line
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.MIFFile">
             <summary>
            The main class for (MID/MIF) datasets.  External programs should use this
            class to open a (MID/MIF) dataset and read/write features from/to it.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.ParseMIFHeader">
             <summary>
            Scan the header of a MIF file, and store any useful information into
            class members.  The main piece of information being the fields
            definition that we use to build the OGRFeatureDefn for this file.
             This private method should be used only during the Open() call.
             </summary>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GotoFeature(System.Int32)">
            <summary>
            Private method to move MIF and MID pointers ready to read specified
            feature.  Note that Feature Ids start at 1.
            </summary>
            <param name="nFeatureId"></param>
            <returns>
            Returns 0 on success, -1 on error (likely request for invalid feature id)
            </returns>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.MIFFile._bPreParsed">
            <summary>
            Private Write access specific stuff
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.WriteMIFHeader">
            <summary>
            Generate the .MIF header.
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.UpdateExtents(System.Double,System.Double)">
            <summary>
            Private Methode used to update the dataset extents
            </summary>
            <param name="dfX"></param>
            <param name="dfY"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.Close">
            <summary>
            Close current file, and release all memory used.
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
             <summary>
            
             </summary>
             <param name="pszFname"></param>
             <param name="pszAccess"></param>
             <param name="bTestOpenNoError"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetExtent(ThinkGeo.MapSuite.Layers.OGREnvelope,System.Boolean)">
             <summary>
             Fetch extent of the data currently stored in the dataset.  We collect
            this information while preparsing the file ... often already done for
            other reasons, and if not it is still faster than fully reading all
            the features just to count them.
             </summary>
             <param name="psExtent"></param>
             <param name="bForce"></param>
             <returns>Returns OGRERR_NONE/OGRRERR_FAILURE.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetNextFeatureId(System.Int32)">
             <summary>
            Read access specific stuff
            Returns feature id that follows nPrevId, or -1 if it is the
            last feature id.  Pass nPrevId=-1 to fetch the first valid feature id.
             </summary>
             <param name="nPrevId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetFeatureRef(System.Int32)">
             <summary>
            Fill and return a TABFeature object for the specified feature id.
            
             The retruned pointer is a reference to an object owned and maintained
             by this MIFFile object.  It should not be altered or freed by the
             caller and its contents is guaranteed to be valid only until the next
             call to GetFeatureRef() or Close().
            
             Returns null if the specified feature id does not exist of if an
             error happened.  In any case, CPLError() will have been called to
             report the reason of the failure.
             </summary>
             <param name="nFeatureId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetLayerDefn">
             <summary>
            Returns a reference to the OGRFeatureDefn that will be used to create
            features in this dataset.
            
            Returns a reference to an object that is maintained by this MIFFile
            object (and thus should not be modified or freed by the caller) or
            null if the OGRFeatureDefn has not been initialized yet (i.e. no file
             opened yet)
             </summary>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetNativeFieldType(System.Int32)">
             <summary>
             Returns the native MapInfo field type for the specified field.
            
             Returns TABFieldType.TABFUnknown if file is not opened, or if specified field index is
             invalid.
             </summary>
             <param name="nFieldId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
             <summary>
             Fetch projection coordinates bounds of a dataset.
            
             Pass bForce=false to avoid a scan of the whole file if the bounds
             are not already available.
            
             Returns 0 on success, -1 on error or if bounds are not available and
             bForce=false.
             </summary>
             <param name="dXMin"></param>
             <param name="dYMin"></param>
             <param name="dXMax"></param>
             <param name="dYMax"></param>
             <param name="bForce"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetFeatureCountByType(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
             <summary>
             Return number of features of each type.
            
             NOTE: The current implementation always returns -1 for MIF files
                   since this would require scanning the whole file.
            
             When properly implemented, the bForce flag will force scanning the
             whole file by default.
            
             Returns 0 on success, or silently returns -1 (with no error) if this
             information is not available.
             </summary>
             <param name="numPoints"></param>
             <param name="numLines"></param>
             <param name="numRegions"></param>
             <param name="numTexts"></param>
             <param name="bForce"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.SetBounds(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Write access specific stuff
             Set projection coordinates bounds of the newly created dataset.
            
             This function must be called after creating a new dataset and before any
             feature can be written to it.
            
             Returns 0 on success, -1 on error.
             </summary>
             <param name="dXMin"></param>
             <param name="dYMin"></param>
             <param name="dXMax"></param>
             <param name="dYMax"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.SetFeatureDefn(ThinkGeo.MapSuite.Layers.OGRFeatureDefn,System.Collections.Generic.List{ThinkGeo.MapSuite.Layers.TABFieldType})">
             <summary>
             Pass a reference to the OGRFeatureDefn that will be used to create
             features in this dataset.  This function should be called after
             creating a new dataset, but before writing the first feature.
             All features that will be written to this dataset must share this same
             OGRFeatureDefn.
            
             This function will use poFeatureDefn to create a local copy that
             will be used to build the .MID file, etc.
            
             Returns 0 on success, -1 on error.
             </summary>
             <param name="poFeatureDefn"></param>
             <param name="paeMapInfoNativeFieldTypes"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.AddFieldNative(System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
             <summary>
             Create a new field using a native mapinfo data type... this is an
             alternative to defining fields through the OGR interface.
             This function should be called after creating a new dataset, but before
             writing the first feature.
            
             This function will build/update the OGRFeatureDefn that will have to be
             used when writing features to this dataset.
            
             A reference to the OGRFeatureDefn can be obtained using GetLayerDefn().
             </summary>
             <param name="pszName"></param>
             <param name="eMapInfoType"></param>
             <param name="nWidth"></param>
             <param name="nPrecision"></param>
             <param name="bIndexed"></param>
             <param name="bUnique"></param>
             <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.SetFeature(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
             <summary>
             Write a feature to this dataset.
            
             For now only sequential writes are supported (i.e. with nFeatureId=-1)
             but eventually we should be able to do random access by specifying
             a value through nFeatureId.
             </summary>
             <param name="poFeature"></param>
             <param name="nFeatureId"></param>
             <returns>
             Returns the new featureId (> 0) on success, or -1 if an
             error happened in which case, CPLError() will have been called to
             report the reason of the failure.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MIFFile.GetProjInfo(ThinkGeo.MapSuite.Layers.TABProjInfo)">
            <summary>
            semi-private.
            </summary>
            <param name="poPI"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_font(ThinkGeo.MapSuite.Layers.TABFeature,System.String)">
            <summary>
            Set the font name in a a TABFeatureClass.TABFCText or TABFeatureClass.TABFCFontPoint object, or set the
            symbol name in a TABFeatureClass.TABFCCustomPoint.
            </summary>
            <param name="feature">the TABFeature object</param>
            <param name="??">the new font name</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_font(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get the font name from a TABFeatureClass.TABFCText or TABFeatureClass.TABFCFontPoint object, or the
            symbol name from a TABFeatureClass.TABFCCustomPoint.
            </summary>
            <param name="feature">the TABFeature object</param>
            <returns>the text font name</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_brush(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
              Set an object's brush properties.  Applies to region, ellipse and
             rectangle objects.
            
             See the MIF specs for more details on the meaning and valid values of
             each parameter.
             </summary>
             <param name="feature">the TABFeature objec</param>
             <param name="fg_color">the foreground color (24 bits RGB value)</param>
             <param name="bg_color">the background color</param>
             <param name="pattern">pattern the brush number (1 is none, 2 is solid fill, etc.)</param>
             <param name="transparent">
             transparent either 0 for an opaque brush (using bg color) or 1 for transparent (ignore bg color)
             </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_brush_fgcolor(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
             Get an object's brush foreground color property.  Applies to region,
            ellipse and rectangle objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>return the brush foreground color (24 bits RGB value)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_brush_bgcolor(ThinkGeo.MapSuite.Layers.TABFeature)">
             <summary>
            
             </summary>
             <param name="feature">feature the TABFeature object</param>
             <returns>return the brush background color (24 bits RGB value)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_brush_pattern(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's brush pattern property.  Applies to region,
            ellipse and rectangle objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>return the brush pattern number (1 is none, 2 is solid fill, etc.)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_brush_transparent(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's brush transparency property.  Applies to region,
            ellipse and rectangle objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>
            return the brush transparency value, either 0 for an opaque brush
            (using bg color) or 1 for transparent (ignore bg color).
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_pen(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set an object's pen properties.  Applies only to polyline, region,
            rectangle, arc and ellipse objects.
            See the MIF specs for more details on the meaning and valid values of
            each parameter.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <param name="width">
            width the pen width as defined in the MIF specs:  1-7 for pixel
            width, or 11-2047 for width in points (10 + (point_width*10))
            </param>
            <param name="pattern">pattern the pen number (2 is default solid pen).</param>
            <param name="color">color the pen color (24 bits RGB value)</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_pen_color(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's pen color property.  Applies only to polyline, region,
            rectangle, arc and ellipse objects.
            </summary>
            <param name="feature">feature the TABFeature object.</param>
            <returns>return the pen color (24 bits RGB value)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_pen_width(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's pen width property.  Applies only to polyline, region,
            rectangle, arc and ellipse objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>
            return the pen as defined in the MIF specs:  1-7 for pixel
            width, or 11-2047 for width in points (10 + (point_width*10)).
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_pen_pattern(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's pen pattern property.  Applies only to polyline, region,
            rectangle, arc and ellipse objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>return the pen pattern number (2 is default solid pen)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_symbol(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set an object's symbol properties.  Applies only to point objects and
            multipoint.
            See the MIF specs for more details on the meaning and valid values of
            each parameter.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <param name="symbol_no">ymbol_no the symbol number (valid range: 32 to 67)</param>
            <param name="symbol_size">symbol_size the symbol size in pixels (valid range 1 to 48)</param>
            <param name="symbol_color">symbol_color the symbol color (24 bits RGB value)</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_symbol_color(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's symbol color property.  Applies only to point and
            multipoint objects.
            </summary>
            <param name="feature">feature the TABFeature object.</param>
            <returns>the symbol color (24 bits RGB value)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_symbol_no(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's symbol number property.  Applies only to point and
            multipoint objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>the symbol number (valid range: 32 to 67)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_symbol_size(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Get an object's symbol size property.  Applies only to point and
            multipoint objects.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>the symbol size in pixels (valid range 1 to 48)</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_type(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
            Return a TABFeature's object type
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <returns>
            return the feature type, one of TABFC_NoGeom (0), TABFeatureClass.TABFCPoint (1),
            TABFeatureClass.TABFCFontPoint (2), TABFeatureClass.TABFCCustomPoint (3), TABFeatureClass.TABFCText (4),
            TABFeatureClass.TABFCPolyline (5), TABFeatureClass.TABFCArc (6), TABFeatureClass.TABFCRegion (7),
            TABFeatureClass.TABFCRectangle (8), TABFeatureClass.TABFCEllipse (9), TABFeatureClass.TABFCMultiPoint (10) or
            TABFC_Collection (11)
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_vertex_y(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32,System.Int32)">
            <summary>
            Return the Y coordinate of a point in a part of a TABFeature object.
            </summary>
            <param name="feature">feature the TABFeature object</param>
            <param name="part">
            part the part number we are interested in.  Use 0 for objects which
            cannot have multiple parts.
            </param>
            <param name="vertex">vertex the point number, with 0 being the first point.</param>
            <returns>
            return the Y coordinate of the specified point or if the object has no
            geometry or the part or the point number is invalid.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_count(ThinkGeo.MapSuite.Layers.IMapInfoFile)">
            <summary>
            Return the number of attribute fields in a dataset's schema.
            </summary>
            <param name="handle">handle the dataset's handle.</param>
            <returns>return the number of attribute fields defined in the dataset.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_feature_count(ThinkGeo.MapSuite.Layers.IMapInfoFile)">
            <summary>
            Return the number of features in a dataset.
            </summary>
            <param name="handle">handle the dataset's handle.</param>
            <returns>the number of features in the dataset.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_type(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.Int32)">
            <summary>
            Return the type of an attribute field in a dataset's schema.
            </summary>
            <param name="handle">handle the dataset's handle</param>
            <param name="field">the index of the field to look at, with 0 being the first field.</param>
            <returns>
            the field type, one of TABFT_Char (1),
            TABFT_Integer (2), TABFT_SmallInt (3), TABFT_Decimal (4),
            TABFT_Float (5), TABFT_Date (6), or TABFT_Logical (7)
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_name(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.Int32)">
            <summary>
            Return the name of an attribute field in a dataset's schema.
            </summary>
            <param name="handle">handle the dataset's handle.</param>
            <param name="field">the index of the field to look at, with 0 being the first field.</param>
            <returns>
            return the field name.  The returned string pointer is a reference to an
            public buffer and should not be modified or freed by the caller.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_width(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.Int32)">
            <summary>
            Return the width of an attribute field in a dataset's schema.
            </summary>
            <param name="handle">handle the dataset's handle.</param>
            <param name="field">the index of the field to look at, with 0 being the first field.</param>
            <returns>return the field width</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_precision(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.Int32)">
            <summary>
            Return the precision of an attribute field in a dataset's schema
            </summary>
            <param name="handle">handle the dataset's handle.</param>
            <param name="field">the index of the field to look at, with 0 being the first field.</param>
            <returns>return the field precision.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_mif_coordsys(ThinkGeo.MapSuite.Layers.IMapInfoFile)">
            <summary>
             Get the MIF CoordSys string from an opened dataset.
            </summary>
            <param name="dataset">the source dataset</param>
            <returns>
            return a string with the dataset coordinate system definition in MIF
                CoordSys format.  This value can be passed to mitab_c_create() to
                create new datasets with the same coordinate system.
                Returns NULL if the information could not be read.
                The returned string is valid only until the next call to
                mitab_c_get_mif_coordsys().
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_extended_mif_coordsys(ThinkGeo.MapSuite.Layers.IMapInfoFile)">
            <summary>
             Get the MIF CoordSys string from an opened dataset including the
             affine transformation parameters if available.
            </summary>
            <param name="dataset">the source dataset</param>
            <returns>
             return a string with the dataset coordinate system definition in MIF
                CoordSys format.  Returns NULL if the information could not be read.
                The returned string is valid only until the next call to
                mitab_c_get_mif_coordsys().
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_extended_mif_coordsys_vb(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.String@,System.Int32)">
            <summary>
            et the MIF CoordSys string from an opened dataset including the
             affine transformation parameters if available.
            </summary>
            <param name="coordsys">
            a string buffer to return the dataset coordinate system
                definition in MIF CoordSys format.  This value can then be passed
                to mitab_c_create() to create new datasets with the same coordinate
                system.  Returns empty string if the information could not be read.
            </param>
            <param name="length">
            the maximum length of the coordsys string including terminating
                null.
            </param>
            <returns>
            return the length of the string in coordsys or zero if the information
                could not be read
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_mif_coordsys_vb(ThinkGeo.MapSuite.Layers.IMapInfoFile,System.String@,System.Int32)">
            <summary>
             Get the MIF CoordSys string from an opened dataset (VB Version).
            </summary>
            <param name="coordsys">
            coordsys a string buffer to return the dataset coordinate system
                definition in MIF CoordSys format.  This value can then be passed
                to mitab_c_create() to create new datasets with the same coordinate
                system.  Returns empty string if the information could not be read.
            </param>
            <param name="length">
            the maximum length of the coordsys string including terminating
                null.
            </param>
            <returns>
            return the length of the string in coordsys or zero if the information
                could not be read
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_load_coordsys_table(System.String)">
            <summary>
             Load a Coordsys bounds lookup table from an external file.
            </summary>
            <param name="filename">
            the filename of the table to load. Path is relative to the
                current working directory or can be absolute.
            </param>
            <returns>return 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_collection_region(ThinkGeo.MapSuite.Layers.TABFeature,ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
            <summary>
             Set or update the region component of a collection
             This method can be used in three possible ways:
             1- with a new region feature to set a new region component in the
             collection.
             2- pass the region handle obtained from mitab_c_get_collection_region_ref()
             after making modifications to it to force an public update of the region
             geometry into the collection
             3- pass NULL to remove the region component of the collection.
            </summary>
            <param name="feature">the target TABFC_Collection feature.</param>
            <param name="region">the TABFC_Region feature to set in the collection.</param>
            <param name="make_copy">
            if set to true then a copy of the region is made, otherwise
                    the region becomes owned by the collection.
            </param>
            <returns>return 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_collection_polyline(ThinkGeo.MapSuite.Layers.TABFeature,ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
            <summary>
            Set or update the polyline component of a collection
             This method can be used in three possible ways:
             1- with a new polyline feature to set a new polyline component in the
             collection.
             2- pass the polyline handle obtained from mitab_c_get_collection_polyline_ref()
             after making modifications to it to force an public update of the polyline
             geometry into the collection
             3- pass NULL to remove the polyline component of the collection.
            </summary>
            <param name="feature">the target TABFC_Collection feature.</param>
            <param name="polyline">the TABFC_Polyline feature to set in the collection.</param>
            <param name="make_copy">
            if set to true then a copy of the polyline is made,
                    otherwise the polyline becomes owned by the collection.
            </param>
            <returns>return 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_set_collection_multipoint(ThinkGeo.MapSuite.Layers.TABFeature,ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
            <summary>
             Set or update the multipoint component of a collection
             This method can be used in three possible ways:
             1- with a new multipoint feature to set a new multipoint component in the
             collection.
             2- pass the multipoint handle obtained from mitab_c_get_collection_multipoint_ref()
             after making modifications to it to force an public update of the
             multipoint geometry into the collection
             3- pass NULL to remove the multipoint component of the collection.
            </summary>
            <param name="feature">the target TABFC_Collection feature. </param>
            <param name="multipoint">the TABFC_Multipoint feature to set in the collection.</param>
            <param name="make_copy">
            if set to true then a copy of the multipoint is made,
                    otherwise the multipoint becomes owned by the collection.
            </param>
            <returns>return 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabAPI.mitab_c_get_field_as_string(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
            <summary>
                                 _mitab_c_get_feature_info()
                  This is only a helper function... not to be used by outside
                  programs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.ExtractProjDataFromResourceFile">
            <summary>
            Append the proj information into MapInfoBoundsInfo list
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.ExtractDecompressedStream(System.IO.Stream)">
            <summary>
            Detail for appending the proj information into list
            </summary>
            <param name="deCompressedStream">Decompress stream</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.ExtractDataInTxt(System.String)">
            <summary>
            Extract proj information data from text file
            </summary>
            <param name="wholeData">one line string</param>
            <returns>proj information object</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.ExtractByte(System.String)">
            <summary>
            Analysis the HEX in a string
            </summary>
            <param name="byteStr">Byte string</param>
            <returns>Byte data</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.MITABLookupCoordSysBounds(ThinkGeo.MapSuite.Layers.TABProjInfo,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
             Lookup bounds for specified TABProjInfo struct.
             Returns TRUE if valid bounds were found, FALSE otherwise.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabBounds.MITABLoadCoordSysTable(System.String)">
            <summary>
             Load a Coordsys bounds lookup table from an external file.
             The entries from that table will be looked up in priority BEFORE the
             entries from gasBoundsList[] defined above.
             This allows users to override the default bounds for existing
             projections, and to define bounds for new projections not listed in
             the table above.
             The format of the file is a simple text file with one CoordSys string
             per line.  The CoordSys lines should follow the MIF specs, and MUST
             include the optional Bounds definition at the end of the line.
             e.g.
              CoordSys Earth Projection 8, 24, "m", -63, 0, 0.9996, 500000, 0 Bounds \
              (-7746230.6469039, -9998287.383889269) (8746230.6469039, 9998287.383889269)
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabCoordsys.MITABCoordSys2SpatialRef(System.String)">
            <summary>
            Convert a MIF COORDSYS string into a new OGRSpatialReference object
            </summary>
            <param name="pszCoordSys"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabCoordsys.MITABSpatialRef2CoordSys(ThinkGeo.MapSuite.Layers.OGRSpatialReference1)">
            <summary>
             Converts a OGRSpatialReference object into a MIF COORDSYS string.
            </summary>
            <param name="poSR"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabCoordsys.MITABExtractCoordSysBounds(System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Return TRUE if MIF coordsys string contains a BOUNDS parameter and
            Set x/y min/max values.
            </summary>
            <param name="pszCoordSys"></param>
            <param name="dXMin"></param>
            <param name="dYMin"></param>
            <param name="dXMax"></param>
            <param name="dYMax"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABGenerateArc(ThinkGeo.MapSuite.Layers.OGRLineString,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generate the coordinates for an arc and ADD the coordinates to the
            geometry object.  If the geometry already contains some points then
            these won't be lost.
            poLine can be a OGRLineString or one of its derived classes, such as OGRLinearRing
            numPoints is the number of points to generate.
            Angles are specified in radians, valid values are in the range [0..2*PI]
            Arcs are always generated counterclockwise, even if StartAngle > EndAngle
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABCloseRing(ThinkGeo.MapSuite.Layers.OGRLineString)">
            <summary>
            Check if a ring is closed, and add a point to close it if necessary.
            </summary>
            <param name="poRing"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABAdjustFilenameExtension(System.String@)">
             <summary>
             Because Unix filenames are case sensitive and MapInfo datasets often have
             mixed cases filenames, we use this function to find the right filename
             to use ot open a specific file.
             This function works directly on the source string, so the filename it
             contains at the end of the call is the one that should be used.
             </summary>
             <param name="pszFname"></param>
             <returns>
             Returns TRUE if one of the extensions worked, and FALSE otherwise.
             If none of the extensions worked then the original extension will NOT be restored.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABGetBasename(System.String)">
             <summary>
             Extract the basename part of a complete file path.
             </summary>
             <param name="pszFname"></param>
             <returns>
             Returns a newly allocated string without the leading path (dirs) and the extenstion.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TAB_CSLLoad(System.String,System.Text.Encoding)">
            <summary>
            Same as CSLLoad(), but does not produce an error if it fails... it
            just returns null silently instead.
            Load a test file into a stringlist.
             Lines are limited in length by the size fo the CPLReadLine() buffer.
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABUnEscapeString(System.String@,System.Boolean)">
            <summary>
            Convert a string that can possibly contain escaped "\n" chars in
            into into a new one with binary newlines in it.
            Tries to work on hte original buffer unless bSrcIsConst=TRUE, in
            which case the original is always untouched and a copy is allocated
            ONLY IF NECESSARY.  This means that the caller should compare the
            return value and the source (pszString) to see if a copy was returned,
            in which case the caller becomes responsible of freeing both the
            source and the copy.
            </summary>
            <param name="pszString"></param>
            <param name="bSrcIsConst"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABEscapeString(System.String)">
            <summary>
            Convert a string that can possibly contain binary "\n" chars in
            into into a new one with escaped newlines in it.
            The function returns the original string pointer if it did not need to
            be modified, or a copy that has to be freed by the caller if the
            string had to be modified.
            It is up to the caller to decide if he needs to free the returned
            string by comparing the source (pszString) pointer with the returned
            pointer (pszWorkString) to see if they are identical.
            </summary>
            <param name="pszString"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABCleanFieldName(System.String)">
            <summary>
            Return a copy of pszSrcName that contains only valid characters for a
            TAB field name.  All invalid characters are replaced by '_'.
            The returned string should be freed by the caller.
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABUnitIdToString(System.Int32)">
            <summary>
            Return the MIF units name for specified units id.
            Return "" if no match found.
            </summary>
            <param name="nId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.MitabUtils.TABUnitIdFromString(System.String)">
            <summary>
            Return the units ID for specified MIF units name
            </summary>
            <param name="pszName"></param>
            <returns>Returns -1 if no match found.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.mitab_geometry.OGRPolygonLabelPoint(ThinkGeo.MapSuite.Layers.OGRPolygon,ThinkGeo.MapSuite.Layers.OGRPoint)">
            <summary>
            Generate a label point on the surface of a polygon.
            The function is based on a scanline conversion routine used for polygon
            fills.  Instead of processing each line the as with drawing, the
            polygon is sampled. The center of the longest sample is chosen for the
            label point. The label point is guaranteed to be in the polygon even if
            it has holes assuming the polygon is properly formed.
            Returns OGRERR_NONE if it succeeds or OGRERR_FAILURE otherwise.
            Adapted version of msPolygonLabelPoint() from MapServer's mapprimitive.c
            </summary>
            <param name="poPoly"></param>
            <param name="poLabelPoint"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.mitab_geometry.OGRIntersectPointPolygon(ThinkGeo.MapSuite.Layers.OGRPoint,ThinkGeo.MapSuite.Layers.OGRPolygon)">
            <summary>
             * Instead of using ring orientation we count the number of parts the
            point falls in. If odd the point is in the polygon, if 0 or even
            then the point is in a hole or completely outside.
            Returns TRUE is point is inside polygon, FALSE otherwise
            Adapted version of msIntersectPointPolygon() from MapServer's mapsearch.c
            </summary>
            <param name="poPoint"></param>
            <param name="poPoly"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.mitab_geometry.OGRPointInRing(ThinkGeo.MapSuite.Layers.OGRPoint,ThinkGeo.MapSuite.Layers.OGRLineString)">
            <summary>
            Returns TRUE is point is inside ring, FALSE otherwise
            Adapted version of msPointInPolygon() from MapServer's mapsearch.c
            </summary>
            <param name="poPoint"></param>
            <param name="poRing"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRCurve">
            <summary>
            Abstract curve base class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRCurve.#ctor">
            <summary>
            define static variable for the method get_IsClosed()
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRCurve.get_IsClosed">
            <summary>
            Return TRUE:1 if curve is closed.
            Tests if a curve is closed. A curve is closed if its start point is equal to its end point.
            This method relates to the SFCOM ICurve::get_IsClosed() method.
            return TRUE if closed, else FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTInteger">
            Simple 32bit integer 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTIntegerList">
            List of 32bit integers 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTReal">
            Double Precision floating point 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTRealList">
            List of doubles 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTString">
            String of ASCII chars 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTStringList">
            Array of strings 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTWideString">
            Double byte string (unsupported) 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTWideStringList">
            List of wide strings (unsupported) 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTBinary">
            Raw Binary data 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTDate">
            Date 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTTime">
            Time 
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.OGRFieldType.OFTDateTime">
            Date and Time 
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRFeature">
            <summary>
             OGRFeature
             A simple feature, including geometry and attributes.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
             Constructor
             Note that the OGRFeature will increment the reference count of it's
             defining OGRFeatureDefn.  Destruction of the OGRFeatureDefn before
             destruction of all OGRFeatures that depend on it is likely to result in
             a crash.
             This method is the same as the C function OGR_F_Create().
             @param poDefnIn feature class (layer) definition to which the feature will
             adhere.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetDefnRef">
             <summary>
            Returns the reference of OGRFeature's(original base class) attribute
            poDefn(an instance of class OGRFeatureDefn)
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetGeometryDirectly(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Set feature geometry.
             This method updates the features geometry, and operate exactly as
             SetGeometry(), except that this method assumes ownership of the
             passed geometry.
             This method is the same as the C function OGR_F_SetGeometryDirectly().
             @param poGeomIn new geometry to apply to feature. Passing null value here
             is correct and it will result in deallocation of currently assigned geometry
             without assigning new one.
             @return OGRERR_NONE if successful, or OGR_UNSUPPORTED_GEOMETRY_TYPE if
             the geometry type is illegal for the OGRFeatureDefn (checking not yet
             implemented).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetGeometry(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Set feature geometry.
             This method updates the features geometry, and operate exactly as
             SetGeometryDirectly(), except that this method does not assume ownership
             of the passed geometry, but instead makes a copy of it.
             This method is the same as the C function OGR_F_SetGeometry().
             @param poGeomIn new geometry to apply to feature. Passing null value here
             is correct and it will result in deallocation of currently assigned geometry
             without assigning new one.
             @return OGRERR_NONE if successful, or OGR_UNSUPPORTED_GEOMETRY_TYPE if
             the geometry type is illegal for the OGRFeatureDefn (checking not yet
             implemented).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetGeometryRef">
            <summary>
             \fn OGRGeometry *OGRFeature::GetGeometryRef();
             Fetch pointer to feature geometry.
             This method is the same as the C function OGR_F_GetGeometryRef().
             @return pointer to public feature geometry.  This object should
             not be modified.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.Clone">
            <summary>
            Duplicate feature.
             The newly created feature is owned by the caller, and will have it's own
             reference to the OGRFeatureDefn.
             This method is the same as the C function OGR_F_Clone().
             @return new feature, exactly matching this feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFieldDefnRef(System.Int32)">
            <summary>
            \fn OGRFieldDefn *OGRFeature::GetFieldDefnRef( Int32 iField );
             Fetch definition for this field.
             This method is the same as the C function OGR_F_GetFieldDefnRef().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @return the field definition (from the OGRFeatureDefn).  This is an
             public reference, and should not be deleted or modified.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFieldIndex(System.String)">
            <summary>
            \fn Int32 OGRFeature::GetFieldIndex( const char * pszName );
            
             Fetch the field index given field name.
             This is a cover for the OGRFeatureDefn::GetFieldIndex() method.
             This method is the same as the C function OGR_F_GetFieldIndex().
             @param pszName the name of the field to search for.
             @return the field index, or -1 if no matching field is found.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.IsFieldSet(System.Int32)">
            <summary>
             \fn Int32 OGRFeature::IsFieldSet( Int32 iField );
             Test if a field has ever been assigned a value or not.
             This method is the same as the C function OGR_F_IsFieldSet().
             @param iField the field to test.
             @return true if the field has been set, otherwise false.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetRawFieldRef(System.Int32)">
            <summary>
            \fn OGRField *OGRFeature::GetRawFieldRef( Int32 iField );
             Fetch a pointer to the public field value given the index.
             This method is the same as the C function OGR_F_GetRawFieldRef().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @return the returned pointer is to an public data structure, and should
             not be freed, or modified.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFieldAsInteger(System.Int32)">
            <summary>
             Fetch field value as integer.
             OFTString features will be translated using atoi().  OFTReal fields
             will be cast to integer.   Other field types, or errors will result in
             a return value of zero.
             This method is the same as the C function OGR_F_GetFieldAsInteger().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @return the field value.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFieldAsDouble(System.Int32)">
            <summary>
            Fetch field value as a Double.
             OFTString features will be translated using atof().  OFTInteger fields
             will be cast to Double.   Other field types, or errors will result in
             a return value of zero.
             This method is the same as the C function OGR_F_GetFieldAsDouble().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @return the field value.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFieldAsString(System.Int32)">
            <summary>
            Fetch field value as a string.
             OFTReal and OFTInteger fields will be translated to string using
             sprintf(), but not necessarily using the established formatting rules.
             Other field types, or errors will result in a return value of zero.
             This method is the same as the C function OGR_F_GetFieldAsString().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @return the field value.  This string is public, and should not be
             modified, or freed.  It's lifetime may be very brief.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetField(System.Int32,System.Int32)">
            <summary>
             Set field to integer value.
             OFTInteger and OFTReal fields will be set directly.  OFTString fields
             will be assigned a string representation of the value, but not necessarily
             taking into account formatting constraints on this field.  Other field
             types may be unaffected.
             This method is the same as the C function OGR_F_SetFieldInteger().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @param nValue the value to assign.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetField(System.Int32,System.Double)">
            <summary>
             Set field to Double value.
             OFTInteger and OFTReal fields will be set directly.  OFTString fields
             will be assigned a string representation of the value, but not necessarily
             taking into account formatting constraints on this field.  Other field
             types may be unaffected.
             This method is the same as the C function OGR_F_SetFieldDouble().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @param dfValue the value to assign.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetField(System.Int32,System.String)">
            <summary>
            Set field to string value.
             OFTInteger fields will be set based on an atoi() conversion of the string.
             OFTReal fields will be set based on an atof() conversion of the string.
             Other field types may be unaffected.
             This method is the same as the C function OGR_F_SetFieldString().
             @param iField the field to fetch, from 0 to GetFieldCount()-1.
             @param pszValue the value to assign.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetFID">
            <summary>
            \fn Int64 OGRFeature::GetFID();
             Get feature identifier.
             This method is the same as the C function OGR_F_GetFID().
             @return feature id or OGRNullFID if none has been assigned.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.SetFID(System.Int64)">
            <summary>
            Set the feature identifier.
             For specific types of features this operation may fail on illegal
             features ids.  Generally it always succeeds.  Feature ids should be
             greater than or equal to zero, with the exception of OGRNullFID (-1)
             indicating that the feature id is unknown.
             This method is the same as the C function OGR_F_SetFID().
             @param nFID the new feature identifier value to assign.
             @return On success OGRERR_NONE, or on failure some other value.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeature.GetStyleString">
            <summary>
            Fetch style string for this feature.
             Set the OGR Feature Style Specification for details on the format of
             this string, and ogr_featurestyle.h for services available to parse it.
             This method is the same as the C function OGR_F_GetStyleString().
            
             @return a reference to a representation in string format, or null if
             there isn't one.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRFeatureDefn">
             <summary>
             Definition of a feature class or feature layer.
             This object contains schema information for a set of OGRFeatures.  In
             table based systems, an OGRFeatureDefn is essentially a layer.  In more
             object oriented approaches (such as SF CORBA) this can represent a class
             of features but doesn't necessarily relate to all of a layer, or just one
             layer.
            
             This object also can contain some other information such as a name, the
             base geometry type and potentially other metadata.
            
             It is reasonable for different translators to derive classes from
             OGRFeatureDefn with additional translator specific information.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.GetFieldDefn(System.Int32)">
             <summary>
             Fetch field definition.
             </summary>
             <param name="iField">the field to fetch, between 0 and GetFieldCount()-1</param>
             <returns>
             return a pointer to an public field definition object.  This object
            should not be modified or freed by the application.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.GetFieldIndex(System.String)">
            <summary>
            Find field by name.
            The field index of the first field matching the passed field name (case
            insensitively) is returned.
            </summary>
            <param name="pszFieldName">the field name to search for</param>
            <returns>
            return the field index, or -1 if no match found.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.AddFieldDefn(ThinkGeo.MapSuite.Layers.OGRFieldDefn)">
            <summary>
            Add a new field definition
            This method should only be called while there are no OGRFeature
            objects in existance based on this OGRFeatureDefn.  The OGRFieldDefn
            passed in is copied, and remains the responsibility of the caller.
            </summary>
            <param name="poNewDefn">the definition of the new field.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.SetGeomType(ThinkGeo.MapSuite.Layers.OGRwkbGeometryType)">
            <summary>
            Assign the base geometry type for this layer.
            All geometry objects using this type must be of the defined type or
            a derived type.  The default upon creation is wkbUnknown which allows for
            any geometry type.  The geometry type should generally not be changed
            after any OGRFeatures have been created against this definition.
            </summary>
            <param name="eNewType">the new type to assign.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.Reference">
            <summary>
            Creates a deep copy of the feature definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFeatureDefn.Release">
            <summary>
            Drop a reference to this object, and destroy if no longer referenced.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRField">
            <summary>
            OGRFeature field attribute value class.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRFieldDefn">
            <summary>
            Definition of an attribute of an OGRFeatureDefn.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFieldDefn.#ctor(System.String,ThinkGeo.MapSuite.Layers.OGRFieldType)">
            <summary>
            </summary>
            <param name="pszNameIn">the name of the new field</param>
            <param name="eTypeIn">the type of the new field</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFieldDefn.SetName(System.String)">
            <summary>
            Reset the name of this field.
            </summary>
            <param name="pszNameIn">the new name to apply</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRFieldDefn.GetFieldTypeName(ThinkGeo.MapSuite.Layers.OGRFieldType)">
            <summary>
            Fetch human readable name for a field type
            </summary>
            <param name="eType">the field type to get name for</param>
            <returns>
            pointer to an public static name string. It should not be
            modified or freed
            </returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRGeometry">
            <summary>
            Name:OGRGeometry
            Description :Abstract base class for all geometry classes.
            Note that the family of spatial analysis methods (Equal(), Disjoint(),
            ...ConvexHull(), Buffer(), ...) are not implemented at this time.
            Some other required and optional geometry methods have also been omitted at this time.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometry.getCoordinateDimension">
            <summary>
            Get the dimension of the coordinates in this object.
            This method corresponds to the SFCOM IGeometry::GetDimension() method.
            This method is the same as the C function OGR_G_GetCoordinateDimension().
            @return in practice this always returns 2 indicating that coordinates are
            specified within a two dimensional space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometry.setCoordinateDimension(System.Int32)">
            <summary>
            Set the coordinate dimension.
            This method sets the explicit coordinate dimension.  Setting the coordinate
            dimension of a geometry to 2 should zero out any existing Z values.  Setting
            the dimension of a geometry collection will not necessarily affect the
            children geometries.
            @param nNewDimension New coordinate dimension value, either 2 or 3.
            </summary>
            <param name="poSR"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometry.assignSpatialReference(ThinkGeo.MapSuite.Layers.OGRSpatialReference1)">
            <summary>
             Assign spatial reference to this object.  Any existing spatial reference
             is replaced, but under no circumstances does this result in the object
             being reprojected.  It is just changing the interpretation of the existing
             geometry.  Note that assigning a spatial reference increments the
             reference count on the OGRSpatialReference1, but does not copy it.
             This is similar to the SFCOM IGeometry::put_SpatialReference() method.
             This method is the same as the C function OGR_G_AssignSpatialReference().
             @param poSR new spatial reference system to apply.
            </summary>
            <param name="poSR"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometry.Intersects(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Do these features intersect?
            Determines whether two geometries intersect.  If GEOS is enabled, then
            this is done in rigerous fashion otherwise TRUE is returned if the
            envelopes (bounding boxes) of the two features overlap.
            The poOtherGeom argument may be safely NULL, but in this case the method
            will always return TRUE.   That is, a NULL geometry is treated as being
            everywhere.
            This method is the same as the C function OGR_G_Intersects().
            @param poOtherGeom the other geometry to test against.
            @return TRUE if the geometries intersect, otherwise FALSE.
            </summary>
            <param name="poOtherGeom"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRGeometryCollection">
            <summary>
            A collection of 1 or more geometry objects.
            All geometries must share a common spatial reference system, and
            Subclasses may impose additional restrictions on the contents.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.#ctor">
            <summary>
            Create an empty geometry collection.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="ppszDstText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.getNumGeometries">
            <summary>
            Fetch number of geometries in container.
            This method relates to the SFCOM IGeometryCollect::get_NumGeometries()
            method.
            @return count of children geometries.  May be zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.getGeometryRef(System.Int32)">
            <summary>
            Fetch geometry from container.
            This method returns a pointer to an geometry within the container.  The
            returned geometry remains owned by the container, and should not be
            modified.  The pointer is only valid untill the next change to the
            geometry container.  Use IGeometry::clone() to make a copy.
            This method relates to the SFCOM IGeometryCollection::get_Geometry() method.
            @param i the index of the geometry to fetch, between 0 and getNumGeometries() - 1.
            @return pointer to requested geometry.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.addGeometry(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Some subclasses of OGRGeometryCollection restrict the types of geometry
            that can be added, and may return an error.  The passed geometry is cloned
            to make an public copy.
            There is no SFCOM analog to this method.
            This method is the same as the C function OGR_G_AddGeometry().
            @param poNewGeom geometry to add to the container.
            @return OGRERR_NONE if successful, or OGRERR_UNSUPPORTED_GEOMETRY_TYPE if
            the geometry type is illegal for the type of geometry container.
            </summary>
            <param name="ogrGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.addGeometryDirectly(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
             * Add a geometry directly to the container.
            Some subclasses of OGRGeometryCollection restrict the types of geometry
            that can be added, and may return an error.  Ownership of the passed
            geometry is taken by the container rather than cloning as addGeometry() does.
            This method is the same as the C function OGR_G_AddGeometryDirectly().
            There is no SFCOM analog to this method.
            @param poNewGeom geometry to add to the container.
            @return OGRERR_NONE if successful, or OGRERR_UNSUPPORTED_GEOMETRY_TYPE if
            the geometry type is illegal for the type of geometry container.
            </summary>
            <param name="ogrGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRGeometryCollection.removeGeometry(System.Int32,System.Int32)">
            <summary>
            Remove a geometry from the container.
            Removing a geometry will cause the geometry count to drop by one, and all
            "higher" geometries will shuffle down one in index.
            There is no SFCOM analog to this method.
            This method is the same as the C function OGR_G_RemoveGeometry().
            @param iGeom the index of the geometry to delete.  A value of -1 is a
            special flag meaning that all geometries should be removed.
            @param bDelete if TRUE the geometry will be deallocated, otherwise it will
            not.  The default is TRUE as the container is considered to own the
            geometries in it.
            @return OGRERR_NONE if successful, or OGRERR_FAILURE if the index is
            out of range.
            </summary>
            <param name="iIndex"></param>
            <param name="bDelete"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRLayer">
            <summary>
            The generic portions of the OGRSFLayer class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLayer.FilterGeometry(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Compare the passed in geometry to the currently installed
            filter.  Optimize for case where filter is just an envelope.
            </summary>
            <param name="poGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLayer.InstallFilter(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            This method is only intended to be used from within
            drivers, normally from the SetSpatialFilter() method.
            It installs a filter, and also tests it to see if it is
            rectangular.  If so, it this is kept track of alongside the
            filter geometry itself so we can do cheaper comparisons in
            the FilterGeometry() call.
            </summary>
            <param name="poFilter"></param>
            <returns>
            Returns TRUE if the newly installed filter differs in some
            way from the current one.
            </returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRLinearRing">
            <summary>
            Concrete representation of a closed ring.
            This class is functionally equivelent to an OGRLineString, but has a
            separate identity to maintain alignment with the OpenGIS simple feature
            data model.  It exists to serve as a component of an OGRPolygon.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLinearRing._WkbSize(System.Int32)">
            <summary>
            Helper method for OGRPolygon.  NOT THE NORMAL WkbSize() METHOD!
            </summary>
            <param name="b3D"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLinearRing.clone">
            <summary>
            We override the OGRCurve clone() to ensure that we get the
            correct virtual table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLinearRing.isClockwise">
            <summary>
            Returns TRUE if the ring has clockwise winding.
            @return TRUE if clockwise otherwise FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLinearRing.get_Area">
            <summary>
            Compute area of ring.
            The area is computed according to Green's Theorem:
            Area is "Sum(x(i)*y(i+1) - x(i+1)*y(i))/2" for i = 0 to pointCount-1,
            assuming the last point is a duplicate of the first.
            @return computed area.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRLineString">
            <summary>
            Concrete representation of a multi-vertex line.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="ppszDstText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.StartPoint(ThinkGeo.MapSuite.Layers.OGRPoint)">
            <summary>
            For now we return a simple euclidian 2D distance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.getNumPoints">
            <summary>
             Get an interpolated point at some distance along the curve.
            </summary>
            <param name="x"></param>
            <param name="ogrPoint"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.getPoint(System.Int32,ThinkGeo.MapSuite.Layers.OGRPoint)">
            <summary>
            Fetch a point in line string.
            This method relates to the SFCOM ILineString::get_Point() method.
            @param i the vertex to fetch, from 0 to getNumPoints()-1.
            @param poPoint a point to initialize with the fetched point.
            </summary>
            <param name="i"></param>
            <param name="poPoint"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.setNumPoints(System.Int32)">
            <summary>
            Set number of points in geometry.
            This method primary exists to preset the number of points in a linestring
            geometry before setPoint() is used to assign them to avoid reallocating
            the array larger with each call to addPoint().
            This method has no SFCOM analog.
            @param nNewPointCount the new number of points for geometry.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.setPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Set the location of a vertex in line string.
            If iPoint is larger than the number of necessary the number of existing
            points in the line string, the point count will be increased to
            accomodate the request.
            There is no SFCOM analog to this method.
            @param iPoint the index of the vertex to assign (zero based).
            @param poPoint the value to assign to the vertex.
            </summary>
            <param name="x"></param>
            <param name="ogrPoint"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.setPoint(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Set the location of a vertex in line string.
            If iPoint is larger than the number of necessary the number of existing
            points in the line string, the point count will be increased to
            accomodate the request.
            There is no SFCOM analog to this method.
            @param iPoint the index of the vertex to assign (zero based).
            @param xIn input X coordinate to assign.
            @param yIn input Y coordinate to assign.
            @param zIn input Z coordinate to assign (defaults to zero).
            </summary>
            <param name="iPoint"></param>
            <param name="xIn"></param>
            <param name="yIn"></param>
            <param name="zIn"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.setPoints(System.Int32,ThinkGeo.MapSuite.Layers.OGRRawPoint[],System.Double[])">
            <summary>
            * Assign all points in a line string.
            This method clears any existing points assigned to this line string,
            and assigns a whole new set.  It is the most efficient way of assigning
            the value of a line string.
            There is no SFCOM analog to this method.
            @param nPointsIn number of points being passed in paoPointsIn
            @param paoPointsIn list of points being assigned.
            @param padfZ the Z values that go with the points (optional, may be NULL).
            </summary>
            <param name="nPointsIn"></param>
            <param name="paoPointsIn"></param>
            <param name="padfZ"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.setPoints(System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
             Assign all points in a line string.
             This method clear any existing points assigned to this line string,
             and assigns a whole new set.
             There is no SFCOM analog to this method.
             @param nPointsIn number of points being passed in padfX and padfY.
             @param padfX list of X coordinates of points being assigned.
             @param padfY list of Y coordinates of points being assigned.
             @param padfZ list of Z coordinates of points being assigned (defaults to
             NULL for 2D objects).
            </summary>
            <param name="nPointsIn"></param>
            <param name="padfX"></param>
            <param name="padfY"></param>
            <param name="padfZ"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRLineString.addPoint(System.Double,System.Double)">
            <summary>
            Add a point to a line string.
            The vertex count of the line string is increased by one, and assigned from
            the passed location value.
            There is no SFCOM analog to this method.
            @param poPoint the point to assign to the new vertex.
            </summary>
            <param name="ogrPoint"></param>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRMultiLineString">
            <summary>
            A collection of OGRLineStrings.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRMultiLineString.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRMultiPoint">
            <summary>
             A collection of OGRPoints.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRMultiPoint.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRMultiPoint.addGeometryDirectly(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Add a new geometry to a collection.  Subclasses should
            override this to verify the type of the new geometry, and
            then call this method to actually add it.
            </summary>
            <param name="ogrGeometry"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRMultiPolygon">
            <summary>
            Note that the IMultiSurface class
            hasn't been modelled, nor have any of it's methods.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRMultiPolygon.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRPoint">
            <summary>
            Point class.
            Implements SFCOM IPoint methods.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPoint.#ctor">
            <summary>
            Create a (0,0) point.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initialize point to value.
            </summary>
            <param name="xIn"></param>
            <param name="yIn"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialize point to value.
            </summary>
            <param name="xIn"></param>
            <param name="yIn"></param>
            <param name="zIn"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPoint.exportToWkt(System.String@)">
            <summary>
             Translate this structure into it's well known text format
             equivelent.
            </summary>
            <param name="ppszDstText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPoint.clone">
            <summary>
             Make a new object that is a copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRPolygon">
            <summary>
            Concrete class representing polygons.
            Note that the OpenGIS simple features polygons consist of one outer
            ring, and zero or more inner rings.  A polygon cannot represent disconnected
            regions (such as multiple islands in a political body).  The
            OGRMultiPolygon must be used for this.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.#ctor">
            <summary>
            Create an empty polygon.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.exportToWkt(System.String@)">
            <summary>
            Translate this structure into it's well known text format]
            equivelent.  This could be made alot more CPU efficient!
            </summary>
            <param name="ppszDstText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.addRing(ThinkGeo.MapSuite.Layers.OGRLinearRing)">
            <summary>
            Add a ring to a polygon.
            If the polygon has no external ring (it is empty) this will be used as
            the external ring, otherwise it is used as an public ring.  The passed
            OGRLinearRing remains the responsibility of the caller (an public copy
            is made).
            This method has no SFCOM analog.
            @param poNewRing ring to be added to the polygon.
            </summary>
            <param name="ogrLinearRing"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.addRingDirectly(ThinkGeo.MapSuite.Layers.OGRLinearRing)">
            <summary>
            Add a ring to a polygon.
            If the polygon has no external ring (it is empty) this will be used as
            the external ring, otherwise it is used as an public ring.  Ownership
            of the passed ring is assumed by the OGRPolygon, but otherwise this
            method operates the same as OGRPolygon::AddRing().
            This method has no SFCOM analog.This method has no SFCOM analog.
            @param poNewRing ring to be added to the polygon.
            </summary>
            <param name="ogrLinearRing"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.getNumInteriorRings">
            <summary>
             Fetch the number of public rings.
             Relates to the SFCOM IPolygon::get_NumInteriorRings() method.
             @return count of public rings, zero or more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPolygon.getInteriorRing(System.Int32)">
            <summary>
            Fetch reference to indicated public ring.
            Note that the returned ring pointer is to an public data object of
            the OGRPolygon.  It should not be modified or deleted by the application,
            and the pointer is only valid till the polygon is next modified.  Use
            the OGRGeometry::clone() method to make a separate copy within the
            application.
            Relates to the SFCOM IPolygon::get_publicRing() method.
            @param iRing public ring index from 0 to getNumpublicRings() - 1.
            @return pointer to external ring.  May be NULL if the OGRPolygon is empty.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRPublicFun">
            <summary>
            provide some public functions about dealing the string or char[]
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRPublicFun.strlen(System.String)">
            <summary>
            Get the content length of the char
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRSpatialReference1">
             <summary>
             This class respresents a OpenGIS Spatial Reference System, and contains
             methods for converting between this object organization and well known
             text (WKT) format.  This object is reference counted as one instance of
             the object is normally shared between many OGRGeometry objects.
             Normally application code can fetch needed parameter values for this
             SRS using GetAttrValue(), but in special cases the underlying parse tree
             (or OGR_SRSNode objects) can be accessed more directly.
            
             See <a href="osr_tutorial.html">the tutorial</a> for more information on
             how to use this class.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetNormInfo">
            <summary>
            Set the public information for normalizing linear, and
             angular values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.#ctor">
            <summary>
            Simple copy constructor.  See also Clone().
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.Reference">
            <summary>
            Increments the reference count by one.
            The reference count is used keep track of the number of OGRGeometry objects
            referencing this SRS.
            The method does the same thing as the C function OSRReference().
            @return the updated reference count.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.Dereference">
            <summary>
            Decrements the reference count by one.
            The method does the same thing as the C function OSRDereference().
            @return the updated reference count.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.Clone">
            <summary>
            Make a duplicate of this OGRSpatialReference1.
            This method is the same as the C function OSRClone().
            @return a new SRS, which becomes the responsibility of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetTM(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Transverse Mercator
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetLAEA(System.Double,System.Double,System.Double,System.Double)">
            Lambert Azimuthal Equal-Area 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetLCC(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            Lambert Conformal Conic 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetLCCB(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            Lambert Conformal Conic (Belgium) 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetMC(System.Double,System.Double,System.Double,System.Double)">
            Miller Cylindrical 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetMercator(System.Double,System.Double,System.Double,System.Double,System.Double)">
            Mercator 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetMollweide(System.Double,System.Double,System.Double)">
            Mollweide 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetNZMG(System.Double,System.Double,System.Double,System.Double)">
            New Zealand Map Grid 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetPolyconic(System.Double,System.Double,System.Double,System.Double)">
            Polyconic 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetRobinson(System.Double,System.Double,System.Double)">
            Robinson 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetSinusoidal(System.Double,System.Double,System.Double)">
            Sinusoidal 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetStereographic(System.Double,System.Double,System.Double,System.Double,System.Double)">
            Stereographic 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetSOC(System.Double,System.Double,System.Double,System.Double)">
            Swiss Oblique Cylindrical 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetTMVariant(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            Transverse Mercator variants. 
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.exportToWkt(System.String@)">
            <summary>
            Convert this SRS into WKT format.
            Note that the returned WKT string should be freed with OGRFree() or
            CPLFree() when no longer needed.  It is the responsibility of the caller.
            This method is the same as the C function OSRExportToWkt().
            @param ppszResult the resulting string is returned in this pointer.
            @return currently OGRERR_NONE is always returned, but the future it
            is possible error conditions will develop.
            </summary>
            <param name="ppszResult"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetTOWGS84(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the Bursa-Wolf conversion to WGS84.
            This will create the TOWGS84 node as a child of the DATUM.  It will fail
            if there is no existing DATUM node.  Unlike most OGRSpatialReference1
            methods it will insert itself in the appropriate order, and will replace
            an existing TOWGS84 node if there is one.
            The parameters have the same meaning as EPSG transformation 9606
            (Position Vector 7-param. transformation).
            This method is the same as the C function OSRSetTOWGS84().
            @return OGRERR_NONE on success.
            </summary>
            <param name="dfDX"></param>
            <param name="dfDY"></param>
            <param name="dfDZ"></param>
            <param name="dfEX"></param>
            <param name="dfEY"></param>
            <param name="dfEZ"></param>
            <param name="dfPPM"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetRoot(ThinkGeo.MapSuite.Layers.OGR_SRSNode)">
            <summary>
            Set the root SRS node.
            If the object has an existing tree of OGR_SRSNodes, they are destroyed
            as part of assigning the new root.  Ownership of the passed OGR_SRSNode is
            is assumed by the OGRSpatialReference1.
            @param poNewRoot object to assign as root.
            </summary>
            <param name="poNewRoot"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetAttrNode(System.String)">
            <summary>
            Find named node in tree.
            This method does a pre-order traversal of the node tree searching for
            a node with this exact value (case insensitive), and returns it.  Leaf
            nodes are not considered, under the assumption that they are just
            attribute value nodes.
            If a node appears more than once in the tree (such as UNIT for instance),
            the first encountered will be returned.  Use GetNode() on a subtree to be
            more specific.
            @param pszNodePath the name of the node to search for.  May contain multiple
            components such as "GEOGCS|UNITS".
            @return a pointer to the node found, or NULL if none.
            </summary>
            <param name="pszNodePath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetAttrValue(System.String,System.Int32)">
            <summary>
            Fetch indicated attribute of named node.
            This method uses GetAttrNode() to find the named node, and then extracts
            the value of the indicated child.  Thus a call to GetAttrValue("UNIT",1)
            would return the second child of the UNIT node, which is normally the
            length of the linear unit in meters.
            This method does the same thing as the C function OSRGetAttrValue().
            @param pszNodeName the tree node to look for (case insensitive).
            @param iAttr the child of the node to fetch (zero based).
            @return the requested value, or NULL if it fails for any reason.
            </summary>
            <param name="pszNodeName"></param>
            <param name="iAttr"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetNode(System.String,System.String)">
            <summary>
            Set attribute value in spatial reference.
            Missing intermediate nodes in the path will be created if not already
            in existance.  If the attribute has no children one will be created and
            assigned the value otherwise the zeroth child will be assigned the value.
            This method does the same as the C function OSRSetAttrValue().
            @param pszNodePath full path to attribute to be set.  For instance
            "PROJCS|GEOGCS|UNITS".
            @param pszNewNodeValue value to be assigned to node, such as "meter".
            This may be NULL if you just want to force creation of the intermediate path.
            </summary>
            <param name="pszNodePath"></param>
            <param name="pszNewNodeValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetLinearUnits(System.String,System.Double)">
            <summary>
            Set the linear units for the projection.
            This method creates a UNITS subnode with the specified values as a
            child of the PROJCS or LOCAL_CS node.
            This method does the same as the C function OSRSetLinearUnits().
            @param pszUnitsName the units name to be used.  Some preferred units
            names can be found in ogr_srs_api.h such as SRS_UL_METER, SRS_UL_FOOT
            and SRS_UL_US_FOOT.
            @param dfInMeters the value to multiple by a length in the indicated
            units to transform to meters.  Some standard conversion factors can
            be found in ogr_srs_api.h.
            @return OGRERR_NONE on success.
            </summary>
            <param name="pszName"></param>
            <param name="dfInMeters"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetLinearUnits(System.String@)">
            <summary>
            Fetch linear projection units.
            If no units are available, a value of "Meters" and 1.0 will be assumed.
            This method only checks directly under the PROJCS or LOCAL_CS node for
            units.
            This method does the same thing as the C function OSRGetLinearUnits()/
            @param ppszName a pointer to be updated with the pointer to the
            units name.  The returned value remains public to the OGRSpatialReference1
            and shouldn't be freed, or modified.  It may be invalidated on the next
            OGRSpatialReference1 call.
            @return the value to multiply by linear distances to transform them to
            meters.
            </summary>
            <param name="ppszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetAngularUnits(System.String@)">
            <summary>
            Fetch angular geographic coordinate system units.
            If no units are available, a value of "degree" and SRS_UA_DEGREE_CONV
            will be assumed.  This method only checks directly under the GEOGCS node
            for units.
            This method does the same thing as the C function OSRGetAngularUnits().
            @param ppszName a pointer to be updated with the pointer to the
            units name.  The returned value remains public to the OGRSpatialReference1
            and shouldn't be freed, or modified.  It may be invalidated on the next
            OGRSpatialReference1 call.
            @return the value to multiply by angular distances to transform them to
            radians.
            </summary>
            <param name="ppszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetPrimeMeridian(System.String@)">
            <summary>
            Fetch prime meridian info.
            Returns the offset of the prime meridian from greenwich in degrees,
            and the prime meridian name (if requested).   If no PRIMEM value exists
            in the coordinate system definition a value of "Greenwich" and an
            offset of 0.0 is assumed.
            @param ppszName return location for prime meridian name.  If NULL, name
            is not returned.
            @return the offset to the GEOGCS prime meridian from greenwich in decimal
            degrees.
            </summary>
            <param name="ppszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.Clear">
            <summary>
            Wipe current definition.
            Returns OGRSpatialReference1 to a state with no definition, as it
            exists when first created.  It does not affect reference counts
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetGeogCS(System.String,System.String,System.String,System.Double,System.Double,System.String,System.Double,System.String,System.Double)">
            <summary>
            Set geographic coordinate system.
            This method is used to set the datum, ellipsoid, prime meridian and
            angular units for a geographic coordinate system.  It can be used on it's
            own to establish a geographic spatial reference, or applied to a
            projected coordinate system to establish the underlying geographic
            coordinate system.
            This method does the same as the C function OSRSetGeogCS().
            @return OGRERR_NONE on success.
            </summary>
            <param name="pszGeogName"></param>
            <param name="pszDatumName"></param>
            <param name="pszSpheroidName"></param>
            <param name="dfSemiMajor"></param>
            <param name="dfInvFlattening"></param>
            <param name="pszPMName"></param>
            <param name="dfPMOffset"></param>
            <param name="pszAngularUnits"></param>
            <param name="dfConvertToRadians"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetProjParm(System.String,System.Double)">
            <summary>
            Set a projection parameter value.
            Adds a new PARAMETER under the PROJCS with the indicated name and value.
            This method is the same as the C function OSRSetProjParm().
            Please check http://www.remotesensing.org/geotiff/proj_list pages for
            legal parameter names for specific projections.
            @param pszParmName the parameter name, which should be selected from
            the macros in ogr_srs_api.h, such as SRS_PP_CENTRAL_MERIDIAN.
            @param dfValue value to assign.
            @return OGRERR_NONE on success.
            </summary>
            <param name="pszParmName"></param>
            <param name="dfValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.GetProjParm(System.String,System.Double,ThinkGeo.MapSuite.Layers.OGRErr@)">
            <summary>
            Fetch a projection parameter value.
            NOTE: This code should be modified to translate non degree angles into
            degrees based on the GEOGCS unit.  This has not yet been done.
            This method is the same as the C function OSRGetProjParm().
            @param pszName the name of the parameter to fetch, from the set of
            SRS_PP codes in ogr_srs_api.h
            @param dfDefaultValue the value to return if this parameter doesn't exist.
            @param pnErr place to put error code on failure.  Ignored if NULL.
            @return value of parameter.
            </summary>
            <param name="pszName"></param>
            <param name="dfDefaultValue"></param>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetNormProjParm(System.String,System.Double)">
            <summary>
            Set a projection parameter with a normalized value.
            This method is the same as SetProjParm() except that the value of
            the parameter passed in is assumed to be in "normalized" form (decimal
            degrees for angular values, meters for linear values.  The values are
            converted in a form suitable for the GEOGCS and linear units in effect.
             This method is the same as the C function OSRSetNormProjParm().
            @param pszName the parameter name, which should be selected from
            the macros in ogr_srs_api.h, such as SRS_PP_CENTRAL_MERIDIAN.
            @param dfValue value to assign.
            @return OGRERR_NONE on success.
            </summary>
            <param name="pszName"></param>
            <param name="dfValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.IsLinearParameter(System.String)">
            <summary>
            Is the passed projection parameter an linear one measured in
            meters or some similar linear measure.
            </summary>
            <param name="pszParameterName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetLocalCS(System.String)" -->
        <member name="M:ThinkGeo.MapSuite.Layers.OGRSpatialReference1.SetProjection(System.String)">
            <summary>
            Set a projection name.
            This method is the same as the C function OSRSetProjection().
            @param pszProjection the projection name, which should be selected from
            the macros in ogr_srs_api.h, such as SRS_PT_TRANSVERSE_MERCATOR.
            @return OGRERR_NONE on success.
            </summary>
            <param name="pszProjection"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRSRSString">
            <summary>
            define some "standard" strings.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRStyleTable.Find(System.String)">
            <summary>
            return the StyleString based on the gived name,
            otherwise return NULL
            </summary>
            <param name="pszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRStyleTable.IsExist(System.String)">
            <summary>
            return a index of the style in the table otherwise return -1
            </summary>
            <param name="pszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRStyleTable.GetStyleName(System.String)">
            <summary>
            return the Name of a gived stylestring otherwise NULL
            </summary>
            <param name="pszStyleString"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRStyleTool.StyleModified">
            <summary>
            return -1, if the wanted type is not found, ex:
            if you want ogr-pen value, pszWanted should be ogr-pen(case
            sensitive)
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGRUtils">
            <summary>
            a static class provide public methods in file OGRUtils.cpp
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRUtils.OGRRealloc``1(``0[],System.Int32)">
            <summary>
            Cover for CPLRealloc()
            </summary>
            <param name="pOld"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRUtils.OGRMakeWktCoordinate(System.String@,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
             Format a well known text coordinate, trying to keep the
             ASCII representation compact, but accurate.  These rules
             will have to tighten up in the future.
             Currently a new point should require no more than 64
             characters barring the X or Y value being extremely large.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGRUtils.OGRTrimExtraZeros(System.Char[])">
            <summary>
            Read a point string.  The point list must be contained in
            brackets and each point pair separated by a comma.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.OGR_SRSNode">
            <summary>
            Objects of this class are used to represent value nodes in the parsed
            representation of the WKT SRS format.  For instance UNIT["METER",1]
            would be rendered into three OGR_SRSNodes.  The root node would have a
            value of UNIT, and two children, the first with a value of METER, and the
            second with a value of 1.
            Normally application code just interacts with the OGRSpatialReference
            object, which uses the OGR_SRSNode to implement it's data structure;
            however, this class is user accessable for detailed access to components
            of an SRS definition.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.NeedsQuoting">
            <summary>
            Does this node need to be quoted when it is exported to Wkt?
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.#ctor(System.String)">
            <summary>
            Constructor.
            @param pszValueIn this optional parameter can be used to initialize
            the value of the node upon creation.  If omitted the node will be created
            with a value of "".  Newly created OGR_SRSNodes have no children.
            </summary>
            <param name="pszValueIn"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.GetChild(System.Int32)">
            <summary>
            Fetch requested child.
            @param iChild the index of the child to fetch, from 0 to
            GetChildCount() - 1.
            @return a pointer to the child OGR_SRSNode, or NULL if there is no such
            child.
            </summary>
            <param name="iChild"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.GetNode(System.String)">
            <summary>
            Find named node in tree.
            This method does a pre-order traversal of the node tree searching for
            a node with this exact value (case insensitive), and returns it.  Leaf
            nodes are not considered, under the assumption that they are just
            attribute value nodes.
            @param pszName the name of the node to search for.
            @return a pointer to the node found, or NULL if none.
            </summary>
            <param name="pszName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.InsertChild(ThinkGeo.MapSuite.Layers.OGR_SRSNode,System.Int32)">
            <summary>
            Insert the passed node as a child of target node, at the indicated
            position.
            Note that ownership of the passed node is assumed by the node on which
            the method is invoked ... use the Clone() method if the original is to
            be preserved.  All existing children at location iChild and beyond are
            push down one space to make space for the new child.
            @param poNew the node to add as a child.
            @param iChild position to insert, use 0 to insert at the beginning.
            </summary>
            <param name="poNew"></param>
            <param name="iChild"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.AddChild(ThinkGeo.MapSuite.Layers.OGR_SRSNode)">
            <summary>
            Add passed node as a child of target node.
            Note that ownership of the passed node is assumed by the node on which
            the method is invoked ... use the Clone() method if the original is to
            be preserved.  New children are always added at the end of the list.
            @param poNew the node to add as a child.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.FindChild(System.String)">
            <summary>
            Find the index of the child matching the given string.
            Note that the node value must match pszValue with the exception of
            case.  The comparison is case insensitive.
            @param pszValue the node value being searched for.
            @return the child index, or -1 on failure.
            </summary>
            <param name="pszValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.DestroyChild(System.Int32)">
            <summary>
            Remove a child node, and it's subtree.
            Note that removing a child node will result in children after it
            being renumbered down one.
            @param iChild the index of the child.
            </summary>
            <param name="iChild"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.GetValue">
            <summary>
            Fetch value string for this node.
            @return A non-NULL string is always returned.  The returned pointer is to
            the public value of this node, and should not be modified, or freed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.SetValue(System.String)">
            <summary>
            Set the node value.
            @param pszNewValue the new value to assign to this node.  The passed
            string is duplicated and remains the responsibility of the caller.
            </summary>
            <param name="pszNewValue"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.Clone">
            <summary>
            Make a duplicate of this node, and it's children
            @return a new node tree, which becomes the responsiblity of the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.OGR_SRSNode.exportToWkt(System.String@)">
            <summary>
            Convert this tree of nodes into WKT format.
            Note that the returned WKT string should be freed with OGRFree() or
            CPLFree() when no longer needed.  It is the responsibility of the caller.
            @param ppszResult the resulting string is returned in this pointer.
            @return currently OGRERR_NONE is always returned, but the future it
            is possible error conditions will develop.
            </summary>
            <param name="ppszResult"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABArc">
            <summary>
                                  class TABArc
             Feature class to handle the MapInfo arc types:
                 TAB_GEOM_ARC_C      0x0a
                 TAB_GEOM_ARC        0x0b
             In MapInfo, an arc is defined by the coords of the MBR corners of its
             defining ellipse, which in this case is different from the arc's MBR,
             and a start and end angle in degrees.
             Feature geometry can be either an OGRLineString or an OGRPoint.
             In any case, X/Y radius X/Y center, and start/end angle (in degrees
             counterclockwise) MUST be set.
             When an arc is read, the returned geometry is an OGRLineString
             representing the arc with 2 degrees line segments.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.UpdateMBR(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABArc::UpdateMBR()
             Update the feature MBR members using the geometry
             Returns 0 on success, or -1 if there is no geometry in object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABArc::TABArc()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABArc::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABArc::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABArc::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABArc::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.GetStyleString">
            <summary>
                               TABArc::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABArc.SetStartAngle(System.Double)">
            <summary>
                               TABArc::SetStart/EndAngle()
             Set the start/end angle values in degrees, making sure the values are
             always in the range [0..360]
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABBinBlockManager">
            <summary>
            This class is used to keep track of allocated blocks and is used
            by various classes that need to allocate a new block in a .MAP file.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABBinBlockManager.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABBinBlockManager.AllocNewBlock">
            <summary>
             Returns and reserves the address of the next available block, either a
             brand new block at end of file, or recycle a garbage block if one is
             available.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABBinBlockManager.PushGarbageBlock(System.Int32)">
            <summary>
             Insert a garbage block at the head of the list of garbage blocks.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABBinBlockManager.GetFirstGarbageBlock">
            <summary>
             Return address of the block at the head of the list of garbage blocks
             or 0 if the list is empty.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABBinBlockManager.PopGarbageBlock">
            <summary>
             Return address of the block at the head of the list of garbage blocks
             and remove that block from the list.
             Retuns 0 if the list is empty.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABCollection">
            <summary>
                                  class TABCollection
             Feature class to handle MapInfo Collection features:
                 TAB_GEOM_COLLECTION_C        0x37
                 TAB_GEOM_COLLECTION          0x38
             Feature geometry will be a OGRCollection
             **** IMPORTANT NOTE: ****
             The current implementation does not allow setting the Geometry via
             OGRFeature::SetGeometry*(). The geometries must be set via the
             TABCollection::SetRegion/Pline/MpointDirectly() methods which will take
             care of keeping the OGRFeature's geometry in sync.
             If we ever want to support creating collections via the OGR interface then
             something should be added in TABCollection::WriteGeometryToMapFile(), or
             perhaps in ValidateMapInfoType(), or even better in a custom
             TABCollection::SetGeometry*()... but then this last option may not work
             unless OGRFeature::SetGeometry*() are made virtual in OGR.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.EmptyCollection">
            <summary>
                               TABCollection::EmptyCollection()
             Delete/free all collection components.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.ReadLabelAndMBR(ThinkGeo.MapSuite.Layers.TABMAPCoordBlock,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                               TABCollection::ReadLabelAndMBR()
             Reads the label and MBR elements of the header of a collection component
             Returns 0 on success, -1 on failure.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.WriteLabelAndMBR(ThinkGeo.MapSuite.Layers.TABMAPCoordBlock,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                               TABCollection::WriteLabelAndMBR()
             Writes the label and MBR elements of the header of a collection component
             Returns 0 on success, -1 on failure.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.SyncOGRGeometryCollection(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                               TABCollection::SyncOGRGeometryCollection()
             Copy the region/pline/multipoint's geometries to the OGRFeature's
             geometry.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABCollection::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABCollection::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABCollection::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABCollection::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.GetStyleString">
            <summary>
                               TABCollection::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.DumpMIF(System.IO.Stream)">
            <summary>
                               TABCollection::DumpMIF()
             Dump feature geometry
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.SetRegionDirectly(ThinkGeo.MapSuite.Layers.TABRegion)">
            <summary>
                               TABCollection::SetRegionDirectly()
             Set the region component of the collection, deleting the current
             region component if there is one. The object is then owned by the
             TABCollection object. Passing NULL just deletes it.
             Note that an intentional side-effect is that calling this method
             with the same poRegion pointer that is already owned by this object
             will force resync'ing the OGR Geometry member.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.SetPolylineDirectly(ThinkGeo.MapSuite.Layers.TABPolyline)">
            <summary>
                               TABCollection::SetPolylineDirectly()
             Set the polyline component of the collection, deleting the current
             polyline component if there is one. The object is then owned by the
             TABCollection object. Passing NULL just deletes it.
             Note that an intentional side-effect is that calling this method
             with the same poPline pointer that is already owned by this object
             will force resync'ing the OGR Geometry member.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCollection.SetMultiPointDirectly(ThinkGeo.MapSuite.Layers.TABMultiPoint)">
            <summary>
                               TABCollection::SetMultiPointDirectly()
             Set the multipoint component of the collection, deleting the current
             multipoint component if there is one. The object is then owned by the
             TABCollection object. Passing NULL just deletes it.
             Note that an intentional side-effect is that calling this method
             with the same poMpoint pointer that is already owned by this object
             will force resync'ing the OGR Geometry member.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCustomPoint.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABCustomPoint::TABCustomPoint()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCustomPoint.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABCustomPoint::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCustomPoint.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                              TABCustomPoint::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCustomPoint.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABCustomPoint::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABCustomPoint.GetStyleString">
            <summary>
                               TABCustomPoint::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABDATFile">
            <summary>
             Class to handle Read/Write operation on .DAT files... the .DAT file
             contains the table of attribute field values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.InitWriteHeader">
            <summary>
            Init the header members to be ready to write the header and data records
            to a newly created data file.
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteHeader">
            <summary>
             Init the header members to be ready to write the header and data records
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,ThinkGeo.MapSuite.Layers.TABTableType)">
            <summary>
             Open a .DAT file, and initialize the structures to be ready to read
             records from it.
             We currently support NATIVE and DBF tables for reading, and only
             NATIVE tables for writing.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.Close">
            <summary>
             Close current file, and release all memory used.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetNumFields">
            <summary>
             Return the number of fields in this table.
             Returns a value >= 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetFieldType(System.Int32)">
            <summary>
             Returns the native field type for field # nFieldId as previously set
             by ValidateFieldInfoFromTAB().
             Note that field ids are positive and start at 0.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetFieldWidth(System.Int32)">
            <summary>
                               TABDATFile::GetFieldWidth()
             Returns the width for field # nFieldId as previously read from the
             .DAT header.
             Note that field ids are positive and start at 0.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetFieldPrecision(System.Int32)">
            <summary>
             Returns the precision for field # nFieldId as previously read from the
             .DAT header.
             Note that field ids are positive and start at 0.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ValidateFieldInfoFromTAB(System.Int32,System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32)">
            <summary>
             Check that the value read from the .TAB file by the caller are
             consistent with what is found in the .DAT header.
             Note that field ids are positive and start at 0.
             We have to use this function when opening a file for reading since
             the .DAT file does not contain the full field types information...
             a .DAT file is actually a .DBF file in which the .DBF types are
             handled in a special way... type 'C' fields are used to store binary
             values for most MapInfo types.
             For TABTableDBF, we actually have no validation to do since all types
             are stored as strings publicly, so we'll just convert from string.
            </summary>
            <returns>Returns a value >= 0 if OK, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.AddField(System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32)">
            <summary>
             Create a new field (column) in a newly created table.  This function
             must be called after the file has been opened, but before writing the
             first record.
            </summary>
            <returns>
            Returns the new field index (a value >= 0) if OK, -1 on error.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetNumRecords">
            <summary>
             Return the number of records in this table.
             Returns a value >= 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.GetRecordBlock(System.Int32)">
            <summary>
             Return a TABRawBinBlock reference positioned at the beginning of the
             specified record and ready to read (or write) field values from/to it.
             In read access, the returned block is guaranteed to contain at least one
             full record of data, and in write access, it is at least big enough to
             hold one full record.
            
             Note that record ids are positive and start at 1.
             In Write access, CommitRecordToFile() MUST be called after the
             data items have been written to the record, otherwise the record
             will never make it to the file.
             Returns a reference to the TABRawBinBlock on success or null on error.
             The returned pointer is a reference to a block object owned by this
             TABDATFile object and should not be freed by the caller.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.CommitRecordToFile">
            <summary>
             Commit the data record previously initialized with GetRecordBlock()
             to the file.  This function must be called after writing the data
             values to a record otherwise the record will never make it to the
             file.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadCharField(System.Int32)">
            <summary>
             Read the character field value at the current position in the data
             block.
            
             Use GetRecordBlock() to position the data block to the beginning of
             a record before attempting to read values.
             nWidth is the field length, as defined in the .DAT header.
             Returns a reference to an public buffer that will be valid only until
             the next field is read, or "" if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadIntegerField(System.Int32)">
            <summary>
             Read the integer field value at the current position in the data
             block.
            
             Note: nWidth is used only with TABTableDBF types.
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadSmallIntField(System.Int32)">
            <summary>
                               TABDATFile::ReadSmallIntField()
             Read the smallint field value at the current position in the data
             block.
            
             Note: nWidth is used only with TABTableDBF types.
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadFloatField(System.Int32)">
            <summary>
                               TABDATFile::ReadFloatField()
             Read the float field value at the current position in the data
             block.
            
             Note: nWidth is used only with TABTableDBF types.
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadDecimalField(System.Int32)">
            <summary>
             Read the decimal field value at the current position in the data
             block.
             A decimal field is a floating point value with a fixed number of digits
             stored as a character string.
             nWidth is the field length, as defined in the .DAT header.
             We return the value as a binary double.
            
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadLogicalField(System.Int32)">
            <summary>
             Read the logical field value at the current position in the data
             block.
             The file contains either 0 or 1, and we return a string with
             "F" (false) or "T" (true)
            
             Note: nWidth is used only with TABTableDBF types.
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadDateField(System.Int32)">
            <summary>
             Read the logical field value at the current position in the data
             block.
             A date field is a 4 bytes binary value in which the first byte is
             the day, followed by 1 byte for the month, and 2 bytes for the year.
             We return an 8 chars string in the format "YYYYMMDD"
            
             Note: nWidth is used only with TABTableDBF types.
             Returns a reference to an public buffer that will be valid only until
             the next field is read, or "" if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadTimeField(System.Int32)">
            <summary>
             Read the Time field value at the current position in the data
             block.
             A time field is a 4 bytes binary value which represents the number
             of milliseconds since midnight.
             We return a 9 char string in the format "HHMMSSMMM"
            
             Note: nWidth is used only with TABTableDBF types.
             Returns a reference to an public buffer that will be valid only until
             the next field is read, or "" if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.ReadDateTimeField(System.Int32)">
            <summary>
             Read the DateTime field value at the current position in the data
             block.
             A datetime field is an 8 bytes binary value in which the first byte is
             the day, followed by 1 byte for the month, and 2 bytes for the year. After
             this is 4 bytes which represents the number of milliseconds since midnight.
             We return an 17 chars string in the format "YYYYMMDDhhmmssmmm"
            
             Note: nWidth is used only with TABTableDBF types.
             Returns a reference to an public buffer that will be valid only until
             the next field is read, or "" if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteCharField(System.String,System.Int32,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the character field value at the current position in the data
             block.
            
             Use GetRecordBlock() to position the data block to the beginning of
             a record before attempting to write values.
             nWidth is the field length, as defined in the .DAT header.
             Returns 0 on success, or -1 if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteIntegerField(System.Int32,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the integer field value at the current position in the data
             block.
            
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteSmallIntField(System.Int16,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the smallint field value at the current position in the data
             block.
            
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteFloatField(System.Single,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the float field value at the current position in the data
             block.
            
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteDecimalField(System.Double,System.Int32,System.Int32,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the decimal field value at the current position in the data
             block.
             A decimal field is a floating point value with a fixed number of digits
             stored as a character string.
             nWidth is the field length, as defined in the .DAT header.
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteLogicalField(System.String,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the logical field value at the current position in the data
             block.
             The value written to the file is either 0 or 1, but this function
             takes as input a string with "F" (false) or "T" (true)
            
             CPLError() will have been called if something fails.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteDateField(System.String,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the date field value at the current position in the data
             block.
             A date field is a 4 bytes binary value in which the first byte is
             the day, followed by 1 byte for the month, and 2 bytes for the year.
             The expected input is a 10 chars string in the format "YYYY/MM/DD"
             or "DD/MM/YYYY" or "YYYYMMDD"
            
             Returns 0 on success, or -1 if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteTimeField(System.String,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the date field value at the current position in the data
             block.
             A time field is a 4 byte binary value which represents the number
             of milliseconds since midnight.
             The expected input is a 10 chars string in the format "HH:MM:SS"
             or "HHMMSSmmm"
            
             Returns 0 on success, or -1 if the operation failed, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABDATFile.WriteDateTimeField(System.String,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32)">
            <summary>
             Write the DateTime field value at the current position in the data
             block.
             A datetime field is a 8 bytes binary value in which the first byte is
             the day, followed by 1 byte for the month, and 2 bytes for the year.
             After this the time value is stored as a 4 byte integer
             (milliseconds since midnight)
             The expected input is a 10 chars string in the format "YYYY/MM/DD HH:MM:SS"
             or "DD/MM/YYYY HH:MM:SS" or "YYYYMMDDhhmmssmmm"
            
             Returns 0 on success, or -1 if
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABEllipse">
            <summary>
                                  class TABEllipse
             Feature class to handle the MapInfo ellipse types:
                 TAB_GEOM_ELLIPSE_C      0x19
                 TAB_GEOM_ELLIPSE        0x1a
             An ellipse is defined by the coords of its 2 opposite corners (the MBR)
             Feature geometry can be either an OGRPoint defining the center of the
             ellipse, or an OGRPolygon defining the ellipse itself.
             When an ellipse is read, the returned geometry is a OGRPolygon representing
             the ellipse with 2 degrees line segments.
             In the case of the OGRPoint, then the X/Y Radius MUST be set, but.
             However with an OGRPolygon, if the X/Y radius are not set (== 0) then
             the MBR of the polygon will be used to define the ellipse parameters
             and the center of the MBR is used as the center of the ellipse...
             (i.e. the polygon vertices themselves will be ignored).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.UpdateMBR(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABEllipse::UpdateMBR()
             Update the feature MBR members using the geometry
             Returns 0 on success, or -1 if there is no geometry in object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABEllipse::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABEllipse::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABEllipse::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.GetStyleString">
            <summary>
                               TABEllipse::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABEllipse.DumpMIF(System.IO.Stream)">
            <summary>
                               TABEllipse::DumpMIF()
             Dump feature geometry in a format similar to .MIF REGIONs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABFeature">
            <summary>
                                  class TABFeature
             Extend the OGRFeature to support MapInfo specific extensions related
             to geometry types, representation strings, etc.
             TABFeature will be used as a base class for all the feature classes.
             This class will also be used to instanciate objects with no Geometry
             (i.e. type TAB_GEOM_NONE) which is a valid case in MapInfo.
             The logic to read/write the object from/to the .DAT and .MAP files is also
             implemented as part of this class and derived classes.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.CopyTABFeatureBase(ThinkGeo.MapSuite.Layers.TABFeature)">
            <summary>
                                 TABFeature::CopyTABFeatureBase()
             Used by CloneTABFeature() to copy the basic (fields, geometry, etc.)
             TABFeature members.
             The newly created feature is owned by the caller, and will have it's own
             reference to the OGRFeatureDefn.
             It is possible to create the clone with a different OGRFeatureDefn,
             in this case, the fields won't be copied of course.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.UpdateMBR(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABFeature::UpdateMBR()
             Fetch envelope of poGeom and update MBR.
             Integer coord MBR is updated only if poMapFile is not null.
             Returns 0 on success, or -1 if there is no geometry in object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABFeature::TABFeature()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.CreateFromMapInfoType(System.Int32,ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABFeature::CreateFromMapInfoType()
             Factory that creates a TABFeature of the right class for the specified
             MapInfo Type
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABFeature::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             The newly created feature is owned by the caller, and will have it's own
             reference to the OGRFeatureDefn.
             It is possible to create the clone with a different OGRFeatureDefn,
             in this case, the fields won't be copied of course.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.ReadRecordFromDATFile(ThinkGeo.MapSuite.Layers.TABDATFile)">
            <summary>
                               TABFeature::ReadRecordFromDATFile()
             Fill the fields part of the feature from the contents of the
             table record pointed to by poDATFile.
             It is assumed that poDATFile currently points to the beginning of
             the table record and that this feature's OGRFeatureDefn has been
             properly initialized for this table.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                              TABFeature::ReadGeometryFromMAPFile()
             In derived classes, this method should be reimplemented to
             fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that before calling ReadGeometryFromMAPFile(), poMAPFile
             currently points to the beginning of a map object.
             bCoordBlockDataOnly=TRUE is used when this method is called to copy only
             the CoordBlock data during splitting of object blocks. In this case we
             need to process only the information related to the CoordBlock. One
             important thing to avoid is reading/writing pen/brush/symbol definitions
             as that would screw up their ref counters.
             ppoCoordBlock is used by TABCollection and by index splitting code
             to provide a CoordBlock to use instead of the one from the poMAPFile and
             return the current pointer at the end of the call.
             The current implementation does nothing since instances of TABFeature
             objects contain no geometry (i.e. TAB_GEOM_NONE).
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.WriteRecordToDATFile(ThinkGeo.MapSuite.Layers.TABDATFile,ThinkGeo.MapSuite.Layers.TABINDFile,System.Int32[])">
            <summary>
                               TABFeature::WriteRecordToDATFile()
             Write the attribute part of the feature to the .DAT file.
             It is assumed that poDATFile currently points to the beginning of
             the table record and that this feature's OGRFeatureDefn has been
             properly initialized for this table.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                              TABFeature::WriteGeometryToMAPFile()
             In derived classes, this method should be reimplemented to
             write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that before calling WriteGeometryToMAPFile(), poMAPFile
             currently points to a valid map object.
             bCoordBlockDataOnly=TRUE is used when this method is called to copy only
             the CoordBlock data during splitting of object blocks. In this case we
             need to process only the information related to the CoordBlock. One
             important thing to avoid is reading/writing pen/brush/symbol definitions
             as that would screw up their ref counters.
             ppoCoordBlock is used by TABCollection and by index splitting code
             to provide a CoordBlock to use instead of the one from the poMAPFile and
             return the current pointer at the end of the call.
             The current implementation does nothing since instances of TABFeature
             objects contain no geometry (i.e. TAB_GEOM_NONE).
            
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.ValidateCoordType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABFeature::ValidateCoordType()
             Checks the feature envelope to establish if the feature should be
             written using Compressed coordinates or not and adjust m_nMapInfoType
             accordingly. Calling this method also sets (initializes) m_nXMin, m_nYMin,
             m_nXMax, m_nYMax
             This function should be used only by the ValidateMapInfoType()
             implementations.
             Returns TRUE if coord. should be compressed, false otherwise
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.ForceCoordTypeAndOrigin(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                               TABFeature::ForceCoordTypeAndOrigin()
             This function is used by TABCollection::ValidateMapInfoType() to force
             the coord type and compressed origin of all members of a collection
             to be the same. (A replacement for ValidateCoordType() for this
             specific case)
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.SetMBR(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                               TABFeature::SetMBR()
             Set the values for the MBR corners for this feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.GetMBR(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
                               TABFeature::GetMBR()
             Return the values for the MBR corners for this feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.SetIntMBR(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                               TABFeature::SetIntMBR()
             Set the integer coordinates values of the MBR of this feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.GetIntMBR(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                               TABFeature::GetIntMBR()
             Return the integer coordinates values of the MBR of this feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.DumpMID(System.IO.Stream)">
            <summary>
                               TABFeature::DumpMID()
             Dump feature attributes in a format similar to .MID data records.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeature.DumpMIF(System.IO.Stream)">
            <summary>
                               TABFeature::DumpMIF()
             Dump feature geometry in a format similar to .MIF files.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeatureFontBase.DumpFontDef(System.IO.Stream)">
            <summary>
                DumpFontDef()
             Dump Font definition information.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeatureSymbolBase.GetSymbolStyleString(System.Double)">
            <summary>
                               ITABFeatureSymbol::GetSymbolStyleString()
              Return a Symbol() string. All representations info for the Symbol are here.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeatureSymbolBase.SetSymbolFromStyleString(System.String)">
            <summary>
                               ITABFeatureSymbol::SetSymbolFromStyleString()
              Set all Symbol var from a StyleString. Use StyleMgr to do so.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFeatureSymbolBase.DumpSymbolDef(System.IO.Stream)">
            <summary>
                               ITABFeatureSymbol::DumpSymbolDef()
             Dump Symbol definition information.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABFile">
            <summary>
            The main class for TAB datasets.  External programs should use this
            class to open a TAB dataset and read/write features from/to it.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.Close">
            <summary>
             Close current file, and release all memory used.
            </summary>
            <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.ParseTABFileFirstPass(System.Boolean)">
             <summary>
             Private Read access specific stuff
            
             Do a first pass in the TAB header file to establish the table type, etc.
             and store any useful information into class members.
            
             This private method should be used only during the Open() call.
             </summary>
             <param name="bTestOpenNoError"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.ParseTABFileFields">
             <summary>
             Extract the field definition from the TAB header file, validate
             with what we have in the previously opened .DAT or .DBF file, and
             finally build the m_poDefn OGRFeatureDefn for this dataset.
            
             This private method should be used only during the Open() call and after
             ParseTABFileFirstPass() has been called.
             </summary>
             <param name="bTestOpenNoError"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.WriteTABFile">
             <summary>
             Generate the .TAB file using mainly the attribute fields definition.
            
             This private method should be used only during the Close() call with
             write access mode.
             </summary>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
             <summary>
             Open a .TAB dataset and the associated files, and initialize the
             structures to be ready to read features from (or write to) it.
            
             Supported access modes are "r" (read-only) and "w" (create new dataset).
            
             Set bTestOpenNoError=TRUE to silently return -1 with no error message
             if the file cannot be opened.  This is intended to be used in the
             context of a TestOpen() function.  The default value is FALSE which
             means that an error is reported if the file cannot be opened.
            
             Note that dataset extents will have to be set using SetBounds() before
             any feature can be written to a newly created dataset.
            
             In read mode, a valid dataset must have at least a .TAB and a .DAT file.
             The .MAP and .ID files are optional and if they do not exist then
             all features will be returned with NONE geometry.
             </summary>
             <param name="pszFname"></param>
             <param name="pszAccess"></param>
             <param name="bTestOpenNoError"></param>
             <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetQuickSpatialIndexMode(System.Boolean)">
             <summary>
             Select "quick spatial index mode".
            
             The default behavior of MITAB is to generate an optimized spatial index,
             but this results in slower write speed.
            
             Applications that want faster write speed and do not care
             about the performance of spatial queries on the resulting file can
             use SetQuickSpatialIndexMode() to require the creation of a non-optimal
             spatial index (actually emulating the type of spatial index produced
             by MITAB before version 1.6.0). In this mode writing files can be
             about 5 times faster, but spatial queries can be up to 30 times slower.
             </summary>
             <param name="bQuickSpatialIndexMode"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetExtent(ThinkGeo.MapSuite.Layers.OGREnvelope,System.Boolean)">
             <summary>
             Fetch extent of the data currently stored in the dataset.
            
             The bForce flag has no effect on TAB files since that value is
             always in the header.
             </summary>
             <param name="psExtent"></param>
             <param name="bForce"></param>
             <returns>Returns OGRERR_NONE/OGRRERR_FAILURE.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetNextFeatureId(System.Int32)">
            <summary>
            Returns feature id that follows nPrevId, or -1 if it is the
            last feature id.  Pass nPrevId=-1 to fetch the first valid feature id.
            </summary>
            <param name="nPrevId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetFeatureRef(System.Int32)">
             <summary>
             Fill and return a TABFeature object for the specified feature id.
            
             The retruned pointer is a reference to an object owned and maintained
             by this TABFile object.  It should not be altered or freed by the
             caller and its contents is guaranteed to be valid only until the next
             call to GetFeatureRef() or Close().
            
             Returns null if the specified feature id does not exist of if an
             error happened.  In any case, CPLError() will have been called to
             report the reason of the failure.
            
             If an unsupported object type is encountered (likely from a newer version
             of MapInfo) then a valid feature will be returned with a NONE geometry,
             and a warning will be produced with code TAB_WarningFeatureTypeNotSupported
             CPLGetLastErrorNo() should be used to detect that case.
             </summary>
             <param name="nFeatureId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetLayerDefn">
             <summary>
             Returns a reference to the OGRFeatureDefn that will be used to create
             features in this dataset.
            
             Returns a reference to an object that is maintained by this TABFile
             object (and thus should not be modified or freed by the caller) or
             null if the OGRFeatureDefn has not been initialized yet (i.e. no file
             opened yet)
             </summary>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetNativeFieldType(System.Int32)">
             <summary>
             Returns the native MapInfo field type for the specified field.
             Returns TABFieldType.TABFUnknown if file is not opened, or if specified field index is
             invalid.
            
             Note that field ids are positive and start at 0.
             </summary>
             <param name="nFieldId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
             <summary>
             Fetch projection coordinates bounds of a dataset.
            
             The bForce flag has no effect on TAB files since the bounds are
             always in the header.
             </summary>
             <param name="dXMin"></param>
             <param name="dYMin"></param>
             <param name="dXMax"></param>
             <param name="dYMax"></param>
             <param name="bForce"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetSpatialRef">
             <summary>
             Returns a reference to an OGRSpatialReference for this dataset.
             If the projection parameters have not been parsed yet, then we will
             parse them before returning.
            
             The returned object is owned and maintained by this TABFile and
             should not be modified or freed by the caller.
             </summary>
             <returns>Returns null if the SpatialRef cannot be accessed.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetFeatureCountByType(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
             <summary>
             Return number of features of each type.
            
             Note that the sum of the 4 returned values may be different from
             the total number of features since features with NONE geometry
             are not taken into account here.
            
             Note: the bForce flag has nmo effect on .TAB files since the info
             is always in the header.
             </summary>
             <param name="numPoints"></param>
             <param name="numLines"></param>
             <param name="numRegions"></param>
             <param name="numTexts"></param>
             <param name="bForce"></param>
             <returns>
             Returns 0 on success, or silently returns -1 (with no error) if this
            information is not available.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.IsFieldIndexed(System.Int32)">
            <summary>
            Returns TRUE if field is indexed, or FALSE otherwise.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set projection coordinates bounds of the newly created dataset.
            This function must be called after creating a new dataset and before any
            feature can be written to it.
            </summary>
            <param name="dXMin"></param>
            <param name="dYMin"></param>
            <param name="dXMax"></param>
            <param name="dYMax"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetFeatureDefn(ThinkGeo.MapSuite.Layers.OGRFeatureDefn,System.Collections.Generic.List{ThinkGeo.MapSuite.Layers.TABFieldType})">
             <summary>
             Pass a reference to the OGRFeatureDefn that will be used to create
             features in this dataset.  This function should be called after
             creating a new dataset, but before writing the first feature.
             All features that will be written to this dataset must share this same
             OGRFeatureDefn.
            
             A reference to the OGRFeatureDefn will be kept and will be used to
             build the .DAT file, etc.
             </summary>
             <param name="poFeatureDefn"></param>
             <param name="paeMapInfoNativeFieldTypes"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.AddFieldNative(System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
             <summary>
             Create a new field using a native mapinfo data type... this is an
             alternative to defining fields through the OGR interface.
             This function should be called after creating a new dataset, but before
             writing the first feature.
            
             This function will build/update the OGRFeatureDefn that will have to be
             used when writing features to this dataset.
            
             A reference to the OGRFeatureDefn can be obtained using GetLayerDefn().
            
             Note: The bUnique flag has no effect on TABFiles.  See the TABView class.
             </summary>
             <param name="pszName"></param>
             <param name="eMapInfoType"></param>
             <param name="nWidth"></param>
             <param name="nPrecision"></param>
             <param name="bIndexed"></param>
             <param name="bUnique"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetSpatialRef(ThinkGeo.MapSuite.Layers.OGRSpatialReference1)">
            <summary>
            Set the OGRSpatialReference for this dataset.
            A reference to the OGRSpatialReference will be kept, and it will also
            be converted into a TABProjInfo to be stored in the .MAP header.
            </summary>
            <param name="poSpatialRef"></param>
            <returns>Returns 0 on success, and -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetFeature(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
             <summary>
             Write a feature to this dataset.
             For now only sequential writes are supported (i.e. with nFeatureId=-1)
             but eventually we should be able to do random access by specifying
             a value through nFeatureId.
            
             Returns the new featureId (> 0) on success, or -1 if an
             error happened in which case, CPLError() will have been called to
             report the reason of the failure.
             </summary>
             <param name="poFeature"></param>
             <param name="nFeatureId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetFieldIndexed(System.Int32)">
             <summary>
             Request that a field be indexed.  This will create the .IND file if
             necessary, etc.
            
             Note that field ids are positive and start at 0.
             </summary>
             <param name="nFieldId"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetProjInfo(ThinkGeo.MapSuite.Layers.TABProjInfo)">
             <summary>
             Set projection for a new file using a TABProjInfo structure.
            
             This function must be called after creating a new dataset and before any
             feature can be written to it.
            
             This call will also trigger a lookup of default bounds for the specified
             projection (except nonearth), and reset the _bBoundsValid flag.
             </summary>
             <param name="poPI"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.SetMIFCoordSys(System.String)">
            <summary>
            Set projection for a new file using a MIF coordsys String.
            This function must be called after creating a new dataset and before any
            feature can be written to it.
            </summary>
            <param name="pszMIFCoordSys"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetFieldIndexNumber(System.Int32)">
            <summary>
            Returns the field's index number that was specified in the .TAB header
            or 0 if the specified field is not indexed.
            Note that field ids are positive and start at 0
            and valid index ids are positive and start at 1.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFile.GetINDFileRef">
             <summary>
             Opens the .IND file for this dataset and returns a reference to
             the handle.
             If the .IND file has already been opened then the same handle is
             returned directly.
             If the .IND file does not exist then the function silently returns null.
            
             Note that the returned TABINDFile handle is only a reference to an
             object that is owned by this class.  Callers can use it but cannot
             destroy the object.  The object will remain valid for as long as
             the TABFile will remain open.
             </summary>
             <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABFontPoint">
            <summary>
             Feature class to handle MapInfo Font Point Symbol types:
                 TAB_GEOM_FONTSYMBOL_C    0x28
                 TAB_GEOM_FONTSYMBOL      0x29
             Feature geometry will be a OGRPoint
             The symbol number refers to a character code in the specified Windows
             Font (e.g. "Windings").
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABFontPoint::TABFontPoint()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABFontPoint::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABFontPoint::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABFontPoint::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.GetStyleString">
            <summary>
                               TABFontPoint::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABFontPoint.GetFontStyleMIFValue">
            <summary>
                               TABFontPoint::GetFontStyleMIFValue()
             Return the Font Style value for this object using the style values
             that are used in a MIF FONT() clause.  See MIF specs (appendix A).
             The reason why we have to differentiate between the TAB and the MIF font
             style values is that in TAB, TABFSBox is included in the style value
             as code 0x100, but in MIF it is not included, instead it is implied by
             the presence of the BG color in the FONT() clause (the BG color is
             present only when TABFSBox or TABFSHalo is set).
             This also has the effect of shifting all the other style values > 0x100
             by 1 byte.
             NOTE: Even if there is no BG color for font symbols, we inherit this
             problem because Font Point styles use the same codes as Text Font styles.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkGeo.MapSuite.Layers.TABFontPoint.SetSymbolAngle(System.Double)" -->
        <member name="F:ThinkGeo.MapSuite.Layers.TABGlobalStrClass.asDatumInfoList">
            <summary>
            This table was automatically generated by doing translations
            between mif and tab for each datum, and extracting the
            parameters from the tab file.  The OGC names were added
            afterwards and may be incomplete or inaccurate.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABIDFile">
            <summary>
            classes to deal with .MAP files at the MapInfo object level
                                  class TABIDFile
             Class to handle Read/Write operation on .ID files... the .ID file
             contains an index to the objects in the .MAP file by object id.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode)">
            <summary>
             Open a .ID file, and initialize the structures to be ready to read
             objects from it.
             If the filename that is passed in contains a .MAP extension then
             the extension will be changed to .ID before trying to open the file.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.Close">
            <summary>
             Close current file, and release all memory used.
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.GetObjPtr(System.Int32)">
            <summary>
             Return the offset in the .MAP file where the map object with the
             specified id is located.
             Note that object ids are positive and start at 1.
             An object Id of '0' means that object has no geometry.
            </summary>
            <returns>Returns a value >= 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.SetObjPtr(System.Int32,System.Int32)">
            <summary>
             Set the offset in the .MAP file where the map object with the
             specified id is located.
             Note that object ids are positive and start at 1.
             An object Id of '0' means that object has no geometry.
            </summary>
            <returns>Returns a value of 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABIDFile.Dispose">
            <summary>
             Return the value of the biggest valid object id.
             Note that object ids are positive and start at 1.
             Returns a value >= 0 on success, -1 on error.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABINDFile">
            <summary>
             Class to handle table field index (.IND) files... we use this
             class as the main entry point to open and search the table field indexes.
             Note that .IND files are supported for read access only.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.ValidateIndexNo(System.Int32)">
            <summary>
             Private method to validate the index no parameter of some methods...
             returns 0 if index no. is OK, or produces an error ands returns -1
             if index no is not valid.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.ReadHeader">
            <summary>
             (private method)
             Read the header block and init all class members for read access.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.WriteHeader">
            <summary>
             (private method)
             Write the header block based on current index information.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.#ctor">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
            <summary>
             Open a .IND file, read the header and the root nodes for all the
             field indexes, and be ready to search the indexes.
             If the filename that is passed in contains a .DAT extension then
             the extension will be changed to .IND before trying to open the file.
             Note that we pass a pszAccess flag, but only read access is supported
             for now (and there are no plans to support write.)
             Set bTestOpenNoError=TRUE to silently return -1 with no error message
             if the file cannot be opened because it does not exist.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.Close">
            <summary>
             Close current file, and release all memory used.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.SetIndexFieldType(System.Int32,ThinkGeo.MapSuite.Layers.TABFieldType)">
            <summary>
             Sets the field type for the specified index.
             This information will then be used in building the key values, etc.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.BuildKey(System.Int32,System.String)">
            <summary>
                               TABINDFile::BuildKey()
             BuildKey() for string fields
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.BuildKey(System.Int32,System.Double)">
            <summary>
             BuildKey() for float and decimal fields
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.FindFirst(System.Int32,System.Byte[])">
            <summary>
                               TABINDFile::FindFirst()
             Search one of the indexes for a key value.
             Note that index numbers are positive values starting at 1.
             Return value:
              - the key's corresponding record number in the .DAT file (greater than 0)
              - 0 if the key was not found
              - or -1 if an error happened
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.CreateIndex(ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32)">
            <summary>
                               TABINDFile::CreateIndex()
             Create a new index with the specified field type and size.
             Field size applies only to char field type... the other types have a
             predefined key length.
             Key length is limited to 128 chars. char fields longer than 128 chars
             will have their key truncated to 128 bytes.
             Note that a .IND file can contain only a maximum of 29 indexes.
             Returns the new field index on success (greater than 0), or -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDFile.AddEntry(System.Int32,System.Byte[],System.Int32)">
            <summary>
                               TABINDFile::AddEntry()
             Add an .DAT record entry for pKeyValue in the specified index.
             Note that index numbers are positive values starting at 1.
             nRecordNo is the .DAT record number, record numbers start at 1.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABINDNode">
            <summary>
             An index node in a .IND file.
             This class takes care of reading child nodes as necessary when looking
             for a given key value in the index tree.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.GotoNodePtr(System.Int32)">
            <summary>
                               TABINDNode::GotoNodePtr()
             Move to the specified node ptr, and read the new node data from the file.
             This is just a cover funtion on top of InitNode()
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.ReadIndexEntry(System.Int32,System.Byte[])">
            <summary>
                              TABINDNode::ReadIndexEntry()
             Read the key value and record/node ptr for the specified index entry
             inside the current node data.
             nEntryNo is the 0-based index of the index entry that we are interested
             in inside the current node.
             Returns the record/node ptr, and copies the key value inside the
             buffer pointed to by *pKeyValue... this assumes that *pKeyValue points
             to a buffer big enough to hold the key value (m_nKeyLength bytes).
             If pKeyValue == NULL, then this parameter is ignored and the key value
             is not copied.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.IndexKeyCmp(System.Byte[],System.Int32)">
            <summary>
                              TABINDNode::IndexKeyCmp()
             Compare the specified index entry with the key value, and
             return 0 if equal, an integer less than 0 if key is smaller than
             index entry, and an integer greater than 0 if key is bigger than
             index entry.
             nEntryNo is the 0-based index of the index entry that we are interested
             in inside the current node.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.InsertEntry(System.Byte[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
                               TABINDNode::InsertEntry()
             (private method)
             Insert a key/value pair in the current node buffer.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SetNodeBufferDirectly(System.Int32,System.Byte[],System.Int32,ThinkGeo.MapSuite.Layers.TABINDNode)">
            <summary>
                               TABINDNode::SetNodeBufferDirectly()
             (private method)
             Set the key/value part of the nodes buffer and the pointers to the
             current child direclty.  This is used when copying info to a new node
             in SplitNode() and SplitRootNode()
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
                              TABINDNode::TABINDNode()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.InitNode(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,ThinkGeo.MapSuite.Layers.TABBinBlockManager,ThinkGeo.MapSuite.Layers.TABINDNode,System.Int32,System.Int32)">
            <summary>
                              TABINDNode::InitNode()
             Init a node... this function can be used either to initialize a new
             node, or to make it point to a new data block in the file.
             By default, this call will read the data from the file at the
             specified location if necessary, and leave the object ready to be searched.
             In write access, if the block does not exist (i.e. nBlockPtr=0) then a
             new one is created and initialized.
             poParentNode is used in write access in order to update the parent node
             when this node becomes full and has to be split.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SetFieldType(ThinkGeo.MapSuite.Layers.TABFieldType)">
            <summary>
                              TABINDNode::SetFieldType()
             Sets the field type for the current index and recursively set all
             children as well.
             This information will then be used in building the key values, etc.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.FindFirst(System.Byte[])">
            <summary>
                               TABINDNode::FindFirst()
             Start a new search in this node and its children for a key value.
             If the index is not unique, then FindNext() can be used to return
             the other values that correspond to the key.
             Return value:
              - the key's corresponding record number in the .DAT file (greater than 0)
              - 0 if the key was not found
              - or -1 if an error happened
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.CommitToFile">
            <summary>
                               TABINDNode::CommitToFile()
             For write access, write current block and its children to file.
             note: TABRawBinBlock::CommitToFile() does nothing unless the block has
                   been modified.  (it has an public bModified flag)
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.AddEntry(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                              TABINDNode::AddEntry()
             Add an .DAT record entry for pKeyValue in this index
             nRecordNo is the .DAT record number, record numbers start at 1.
             In order to insert a new value, the root node first does a FindFirst()
             that will load the whole tree branch up to the insertion point.
             Then AddEntry() is recursively called up to the leaf node level for
             the insertion of the actual value.
             If the leaf node is full then it will be split and if necessary the
             split will propagate up in the tree through the pointer that each node
             has on its parent.
             If bAddInThisNodeOnly=TRUE, then the entry is added only locally and
             we do not try to update the child node.  This is used when the parent
             of a node that is being splitted has to be updated.
             bInsertAfterCurChild forces the insertion to happen immediately after
             the m_nCurIndexEntry.  This works only when bAddInThisNodeOnly=TRUE.
             The default is to search the node for a an insertion point.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SplitNode">
            <summary>
                               TABINDNode::SplitNode()
             (private method)
             Split a node, update the references in the parent node, etc.
             Note that Root Nodes cannot be split using this method... SplitRootNode()
             should be used instead.
             The node is split in a way that the current child stays inside this
             node object, and a new node is created for the other half of the
             entries.  This way, the object references in this node's parent and in its
             current child all remain valid.  The new node is not kept in memory,
             it is written to disk right away.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SplitRootNode">
            <summary>
                              TABINDNode::SplitRootNode()
             (private method)
             Split a Root Node.
             First, a level of nodes must be added to the tree, then the contents
             of what used to be the root node is moved 1 level down and then that
             node is split like a regular node.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.GetNodeKey">
            <summary>
                               TABINDNode::GetNodeKey()
             Returns a reference to the key for the first entry in the node, which
             is also the key for this node at the level above it in the tree.
             Returns NULL if node is empty.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.UpdateCurChildEntry(System.Byte[],System.Int32)">
            <summary>
                               TABINDNode::UpdateCurChildEntry()
             Update the key for the current child node.  This method is called by
             the child when its first entry (defining its node key) is changed.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.UpdateSplitChild(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
                               TABINDNode::UpdateSplitChild()
             Update the key and/or record ptr information corresponding to the
             current child node.
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SetPrevNodePtr(System.Int32)">
            <summary>
                               TABINDNode::SetPrevNodePtr()
             Update the m_nPrevNodePtr member.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABINDNode.SetNextNodePtr(System.Int32)">
            <summary>
                              TABINDNode::SetNextNodePtr()
             Update the m_nNextNodePtr member.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock">
            <summary>
             Class to handle Read/Write operation on .MAP Coordinate Blocks (Type 03)
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
             <para> Perform some initialization on the block after its binary data has </para>
             <para> been set or changed (or loaded from a file).                       </para>
            </summary>
             <returns>
             0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
             <para> Initialize a newly created block so that it knows to which file it     </para>
             <para> is attached, its block size, etc . and then perform any specific       </para>
             <para> initialization for this block type, including writing a default        </para>
             <para> block header, etc. and leave the block ready to receive data.          </para>
             <para> This is an alternative to calling ReadFromFile() or InitBlockFromData()</para>
             <para> that puts the block in a stable state without loading any initial      </para>
             <para> data in it.</para>
            </summary>
             <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.CommitToFile">
            <summary>
            <para> Commit the current state of the binary block to the file to which      </para>
            <para> it has been previously attached.                                       </para>
            <para> This method makes sure all values are properly set in the map object   </para>
            <para> block header and then calls TABRawBinBlock::CommitToFile() to do       </para>
            <para> the actual writing to disk.                                            </para>
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.SetMAPBlockManagerRef(ThinkGeo.MapSuite.Layers.TABBinBlockManager)">
            <summary>
             <para> Pass a reference to the block manager object for the file this  </para>
             <para> block belongs to.  The block manager will be used by this object</para>
             <para> when it needs to automatically allocate a new block.            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.ReadBytes(System.Int32,System.Byte[])" -->
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.WriteBytes(System.Int32,System.Byte[])">
            <summary>
             Cover function for TABRawBinBlock::WriteBytes() that will automagically
             CommitToFile() the current block and create a new one if we are at
             the end of the current block.
             Then the control is passed to TABRawBinBlock::WriteBytes() to finish the
             work.
            </summary>
            <param name="pabySrcBuf">
             if pabySrcBuf is NULL,The method willonly move the write pointer by the
             specified number of bytes as if the copy had happened... but it
             won't crash.
            </param>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.SetComprCoordOrigin(System.Int32,System.Int32)">
            <summary>
             Set the Compressed integer coordinates space origin to be used when
             reading compressed coordinates using ReadIntCoord().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.ReadIntCoord(System.Boolean,System.Int32@,System.Int32@)">
            <summary>
             <para> Read the next pair of integer coordinates value from the block, and  </para>
             <para> apply the translation relative to the origin of the coord. space     </para>
             <para> previously set using SetComprCoordOrigin() if bCompressed=TRUE.      </para>
             <para> This means that the returned coordinates are always absolute integer </para>
             <para> coordinates, even when the source coords are in compressed form.     </para>
            </summary>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.ReadIntCoords(System.Boolean,System.Int32,System.Int32[])">
            <summary>
             <para> Read the specified number of pairs of X,Y integer coordinates values </para>
             <para> from the block, and apply the translation relative to the origin of  </para>
             <para> the coord. space previously set using SetComprCoordOrigin() if       </para>
             <para> bCompressed=TRUE.                                                    </para>
            </summary>
             <param name="panXY">
             returned coordinates are always absolute integer
             coordinates, even when the source coords are in compressed form.
             panXY should point to an array big enough to receive the specified
             number of coordinates.
             </param>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.ReadCoordSecHdrs(System.Boolean,System.Int32,System.Int32,ThinkGeo.MapSuite.Layers.TABMAPCoordSecHdr[],System.Int32@)">
            <summary>
            Read a set of coordinate section headers for PLINE MULTIPLE or REGIONs
            and store the result in the array of structures pasHdrs[].
            </summary>
            <param name="bCompressed"></param>
            <param name="nVersion">
            In V450 the numVertices is stored on an int32 instead of an int16
            In V800 the numHoles is stored on an int32 instead of an int16
            </param>
            <param name="numSections"></param>
            <param name="pasHdrs">
            OUT: pasHdrs points to an allocated array of at least numSections
            TABMAPCoordSecHdr structures.
            </param>
            <param name="numVerticesTotal">
            OUT: total number of coordinates in the object (the sum of all sections
            headers read).
            </param>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.WriteCoordSecHdrs(System.Int32,System.Int32,ThinkGeo.MapSuite.Layers.TABMAPCoordSecHdr[],System.Boolean)">
            <summary>
             Write a set of coordinate section headers for PLINE MULTIPLE or REGIONs.
            </summary>
            <param name="nVersion">
            In V450 the numVertices is stored on an int32 instead of an int16
            In V800 the numHoles is stored on an int32 instead of an int16
            </param>
            <param name="numSections"></param>
            <param name="pasHdrs">
            pasHdrs should point to an array of numSections TABMAPCoordSecHdr
            structures that have been properly initialized.
            </param>
            <param name="bCompressed"></param>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.SetNextCoordBlock(System.Int32)">
            <summary>
             Set the address (offset from beginning of file) of the coord. block
             that follows the current one.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.WriteIntCoord(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Write a pair of integer coordinates values to the current position in the
             the block.
            </summary>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.SeekEnd">
            <summary>
             Move read/write pointer to end of used part of the block
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPCoordBlock.StartNewFeature">
            <summary>
             <para> Reset all member vars that are used to keep track of data size   </para>
             <para> and MBR for the current feature.  This is info is not needed by  </para>
             <para> the coord blocks themselves, but it helps a lot the callers to   </para>
             <para> have this class take care of that for them.                      </para>
             <para> See Also: GetFeatureDataSize() and GetFeatureMBR()               </para>
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMAPFile">
            <summary>
             Class to handle Read/Write operation on .MAP files... this class hides
             all the dealings with blocks, indexes, etc.
             Use this class to deal with MapInfo objects directly.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.CommitObjAndCoordBlocks(System.Boolean)">
            <summary>
             Commit the TABMAPObjBlock and TABMAPCoordBlock to disk.
             The objects are deleted from memory if bDeleteObjects==TRUE.
            </summary>
            <returns>
             Returns 0 on success, -1 on error.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.LoadObjAndCoordBlocks(System.Int32)">
            <summary>
                               TABMAPFile::LoadObjAndCoordBlocks()
             Load the TABMAPObjBlock at specified address and corresponding
             TABMAPCoordBlock, ready to write new objects to them.
             It is assumed that pre-existing m_poCurObjBlock and m_poCurCoordBlock
             have been flushed to disk already using CommitObjAndCoordBlocks()
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.SplitObjBlock(ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Int32)">
            <summary>
                              TABMAPFile::SplitObjBlock()
             Split m_poCurObjBlock using Guttman algorithm.
             SplitObjBlock() doe its job so that the current obj block will remain
             the best candidate to receive the new object to add. It also flushes
             everything to disk and will update m_poCurCoordBlock to point to the
             last coord block in the chain, ready to accept new data
             Updates to the spatial index are left to the caller.
             Returns the TABMAPObjBlock of the second block for use by the caller
             in updating the spatial index, or NULL in case of error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.MoveObjToBlock(ThinkGeo.MapSuite.Layers.TABMAPObjHdr,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock,ThinkGeo.MapSuite.Layers.TABMAPObjectBlock,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock)">
            <summary>
                               TABMAPFile::MoveObjToBlock()
             Moves an object and its coord data to a new ObjBlock. Used when
             splitting Obj Blocks.
             May update the value of ppoCoordBlock if a new coord block had to
             be created.
             Returns the address where new object is stored on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.PrepareCoordBlock(System.Int32,ThinkGeo.MapSuite.Layers.TABMAPObjectBlock,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABMAPFile::PrepareCoordBlock()
             Prepare the coord block to receive an object of specified type if one
             is needed, and update corresponding members in ObjBlock.
             May update the value of ppoCoordBlock and Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.InitDrawingTools">
            <summary>
                               TABMAPFile::InitDrawingTools()
             Init the drawing tools for this file.
             In Read mode, this will load the drawing tools from the file.
             In Write mode, this function will init an empty the tool def table.
             Reutrns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.CommitDrawingTools">
            <summary>
                               TABMAPFile::CommitDrawingTools()
             Write the drawing tools for this file.
             This function applies only to write access mode.
            
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.CommitSpatialIndex">
            <summary>
                               TABMAPFile::CommitSpatialIndex()
             Write the spatial index blocks tree for this file.
             This function applies only to write access mode.
            
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.LoadNextMatchingObjectBlock(System.Int32)">
            <summary>
                                LoadNextMatchingObjectBlock()
            
                 Advance through the spatial indices till the next object
                 block is loaded that matching the spatial query extents.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.PushBlock(System.Int32)">
            <summary>
                                         PushBlock()
            
                  Install a new block (object or spatial) as being current -
                  whatever that means.  This method is only intended to ever
                  be called from LoadNextMatchingObjectBlock().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.#ctor">
            <summary>
                               TABMAPFile::TABMAPFile()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
            <summary>
                               TABMAPFile::Open()
             Open a .MAP file, and initialize the structures to be ready to read
             objects from it.
             Since .MAP and .ID files are optional, you can set bNoErrorMsg=TRUE to
             disable the error message and receive an return value of 1 if file
             cannot be opened.
             In this case, only the methods MoveToObjId() and GetCurObjType() can
             be used.  They will behave as if the .ID file contained only null
             references, so all object will look like they have NONE geometries.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Close">
            <summary>
                               TABMAPFile::Close()
             Close current file, and release all memory used.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.SetQuickSpatialIndexMode(System.Boolean)">
            <summary>
                              TABMAPFile::SetQuickSpatialIndexMode()
             Select "quick spatial index mode".
             The default behavior of MITAB is to generate an optimized spatial index,
             but this results in slower write speed.
             Applications that want faster write speed and do not care
             about the performance of spatial queries on the resulting file can
             use SetQuickSpatialIndexMode() to require the creation of a non-optimal
             spatial index (actually emulating the type of spatial index produced
             by MITAB before version 1.6.0). In this mode writing files can be
             about 5 times faster, but spatial queries can be up to 30 times slower.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Int2Coordsys(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
                               TABMAPFile::Int2Coordsys()
             Convert from long integer (public) to coordinates system units
             as defined in the file's coordsys clause.
             Note that the false easting/northing and the conversion factor from
             datum to coordsys units are not included in the calculation.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Coordsys2Int(System.Double,System.Double,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
                               TABMAPFile::Coordsys2Int()
             Convert from coordinates system units as defined in the file's
             coordsys clause to long integer (public) coordinates.
             Note that the false easting/northing and the conversion factor from
             datum to coordsys units are not included in the calculation.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Int2CoordsysDist(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
                               TABMAPFile::Int2CoordsysDist()
             Convert a pair of X,Y size (or distance) values from long integer
             (public) to coordinates system units as defined in the file's coordsys
             clause.
             The difference with Int2Coordsys() is that this function only applies
             the scaling factor: it does not apply the displacement.
             Since the calculations on the X and Y values are independent, either
             one can be omitted (i.e. passed as 0)
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.Coordsys2IntDist(System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
                              TABMAPFile::Coordsys2IntDist()
             Convert a pair of X,Y size (or distance) values from coordinates
             system units as defined in the file's coordsys clause to long
             integer (public) coordinate units.
             The difference with Int2Coordsys() is that this function only applies
             the scaling factor: it does not apply the displacement.
             Since the calculations on the X and Y values are independent, either
             one can be omitted (i.e. passed as 0)
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.SetCoordFilter(ThinkGeo.MapSuite.Layers.TABVertex,ThinkGeo.MapSuite.Layers.TABVertex)">
            <summary>
                               TABMAPFile::SetCoordFilter()
             Set the MBR of the area of interest... only objects that at least
             overlap with that area will be returned.
             @param sMin minimum x/y the file's projection coord.
             @param sMax maximum x/y the file's projection coord.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCoordFilter(ThinkGeo.MapSuite.Layers.TABVertex@,ThinkGeo.MapSuite.Layers.TABVertex@)">
            <summary>
                               TABMAPFile::GetCoordFilter()
             Get the MBR of the area of interest, as previously set by
             SetCoordFilter().
             @param sMin vertex into which the minimum x/y values put in coordsys space.
             @param sMax vertex into which the maximum x/y values put in coordsys space.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ResetCoordFilter">
            <summary>
                              TABMAPFile::ResetCoordFilter()
             Reset the MBR of the area of interest to be the extents as defined
             in the header.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.SetCoordsysBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                               TABMAPFile::SetCoordsysBounds()
             Set projection coordinates bounds of the newly created dataset.
             This function must be called after creating a new dataset and before any
             feature can be written to it.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.MoveToObjId(System.Int32)">
            <summary>
                               TABMAPFile::MoveToObjId()
             Get ready to work with the object with the specified id.  The object
             data pointer (inside m_poCurObjBlock) will be moved to the first byte
             of data for this map object.
             The object type and id (i.e. table row number) will be accessible
             using GetCurObjType() and GetCurObjId().
            
             Note that object ids are positive and start at 1.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.UpdateMapHeaderInfo(System.Byte)">
            <summary>
                               TABMAPFile::UpdateMapHeaderInfo()
             Update .map header information (counter of objects by type and minimum
             required version) in light of a new object to be written to the file.
             Called only by PrepareNewObj() and by the TABCollection class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.PrepareNewObj(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
                              TABMAPFile::PrepareNewObj()
             Get ready to write a new object described by poObjHdr (using the
             poObjHdr's m_nId (featureId), m_nType and IntMBR members which must
             have been set by the caller).
             Depending on whether "quick spatial index mode" is selected, we either:
             1- Walk through the spatial index to find the best place to insert the
             new object, update the spatial index references, and prepare the object
             data block to be ready to write the object to it.
             ... or ...
             2- prepare the current object data block to be ready to write the
             object to it. If the object block is full then it is inserted in the
             spatial index and committed to disk, and a new obj block is created.
             m_poCurObjBlock will be set to be ready to receive the new object, and
             a new block will be created if necessary (in which case the current
             block contents will be committed to disk, etc.)  The actual ObjHdr
             data won't be written to m_poCurObjBlock until CommitNewObj() is called.
             If this object type uses coordinate blocks, then the coordinate block
             will be prepared to receive coordinates.
             This function will also take care of updating the .ID index entry for
             the new object.
             Note that object ids are positive and start at 1.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.PrepareNewObjViaSpatialIndex(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
                               TABMAPFile::PrepareNewObjViaSpatialIndex()
             Used by TABMAPFile::PrepareNewObj() to walk through the spatial index
             to find the best place to insert the new object, update the spatial
             index references, and prepare the object data block to be ready to
             write the object to it.
             This method is used when "quick spatial index mode" is NOT selected,
             i.e. when we want to produce a file with an optimal spatial index
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.PrepareNewObjViaObjBlock(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
                               TABMAPFile::PrepareNewObjViaObjBlock()
             Used by TABMAPFile::PrepareNewObj() to prepare the current object
             data block to be ready to write the object to it. If the object block
             is full then it is inserted in the spatial index and committed to disk,
             and a new obj block is created.
             This method is used when "quick spatial index mode" is selected,
             i.e. faster write, but non-optimal spatial index.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.CommitNewObj(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
                               TABMAPFile::CommitNewObj()
             Commit object header data to the ObjBlock. Should be called after
             PrepareNewObj, once all members of the ObjHdr have been set.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ResetReading">
            <summary>
                                        ResetReading()                            */
                                                                                  */
                  Ensure that any resources related to a spatial traversal of     */
                  the file are recovered, and the state reinitialized to the      */
                  initial conditions.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetNextFeatureId(System.Int32)">
            <summary>
                                      GetNextFeatureId()                          */
                                                                                  */
                  Fetch the next feature id based on a traversal of the           */
                  spatial index.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCurObjType">
            <summary>
                               TABMAPFile::GetCurObjType()
             Return the MapInfo object type of the object that the m_poCurObjBlock
             is pointing to.  This value is set after a call to MoveToObjId().
             Returns a value >= 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCurObjId">
            <summary>
                               TABMAPFile::GetCurObjId()
             Return the MapInfo object id of the object that the m_poCurObjBlock
             is pointing to.  This value is set after a call to MoveToObjId().
             Returns a value >= 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCurObjBlock">
            <summary>
                              TABMAPFile::GetCurObjBlock()
             Return the m_poCurObjBlock.  If MoveToObjId() has previously been
             called then m_poCurObjBlock points to the beginning of the current
             object data.
             Returns a reference to an object owned by this TABMAPFile object, or
             NULL on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCurCoordBlock">
            <summary>
                               TABMAPFile::GetCurCoordBlock()
             Return the m_poCurCoordBlock.  This function should be used after
             PrepareNewObj() to get the reference to the coord block that has
             just been initialized.
             Returns a reference to an object owned by this TABMAPFile object, or
             NULL on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetCoordBlock(System.Int32)">
            <summary>
                               TABMAPFile::GetCoordBlock()
             Return a TABMAPCoordBlock object ready to read coordinates from it.
             The block that contains nFileOffset will automatically be
             loaded, and if nFileOffset is the beginning of a new block then the
             pointer will be moved to the beginning of the data.
             The contents of the returned object is only valid until the next call
             to GetCoordBlock().
             Returns a reference to an object owned by this TABMAPFile object, or
             NULL on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetHeaderBlock">
            <summary>
                               TABMAPFile::GetHeaderBlock()
             Return a reference to the MAP file's header block.
             The returned pointer is a reference to an object owned by this TABMAPFile
             object and should not be deleted by the caller.
             Return NULL if file has not been opened yet.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetIndexObjectBlock(System.Int32)">
            <summary>
                               TABMAPFile::GetIndexBlock()
             Return a reference to the requested index or object block..
             Ownership of the returned block is turned over to the caller, who should
             delete it when no longer needed.  The type of the block can be determined
             with the GetBlockType() method.
             @param nFileOffset the offset in the map file of the spatial index
             block or object block to load.
             @return The requested TABMAPIndexBlock, TABMAPObjectBlock or NULL if the
             read fails for some reason.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ReadPenDef(System.Int32,ThinkGeo.MapSuite.Layers.TABPenDef)">
            <summary>
                               TABMAPFile::ReadPenDef()
             Fill the TABPenDef structure with the definition of the specified pen
             index... (1-based pen index)
             If nPenIndex==0 or is invalid, then the structure is cleared.
             Returns 0 on success, -1 on error (i.e. Pen not found).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ReadBrushDef(System.Int32,ThinkGeo.MapSuite.Layers.TABBrushDef)">
            <summary>
                               TABMAPFile::ReadBrushDef()
             Fill the TABBrushDef structure with the definition of the specified Brush
             index... (1-based Brush index)
             If nBrushIndex==0 or is invalid, then the structure is cleared.
             Returns 0 on success, -1 on error (i.e. Brush not found).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ReadFontDef(System.Int32,ThinkGeo.MapSuite.Layers.TABFontDef)">
            <summary>
                               TABMAPFile::ReadFontDef()
             Fill the TABFontDef structure with the definition of the specified Font
             index... (1-based Font index)
             If nFontIndex==0 or is invalid, then the structure is cleared.
             Returns 0 on success, -1 on error (i.e. Font not found).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.ReadSymbolDef(System.Int32,ThinkGeo.MapSuite.Layers.TABSymbolDef)">
            <summary>
                               TABMAPFile::ReadSymbolDef()
             Fill the TABSymbolDef structure with the definition of the specified Symbol
             index... (1-based Symbol index)
             If nSymbolIndex==0 or is invalid, then the structure is cleared.
             Returns 0 on success, -1 on error (i.e. Symbol not found).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.WritePenDef(ThinkGeo.MapSuite.Layers.TABPenDef)">
            <summary>
                               TABMAPFile::WritePenDef()
             Write a Pen Tool to the map file and return the pen index that has
             been attributed to this Pen tool definition, or -1 if something went
             wrong
             Note that the returned index is a 1-based index.  A value of 0
             indicates "none" in MapInfo.
             Returns a value >= 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.WriteBrushDef(ThinkGeo.MapSuite.Layers.TABBrushDef)">
            <summary>
                               TABMAPFile::WriteBrushDef()
             Write a Brush Tool to the map file and return the Brush index that has
             been attributed to this Brush tool definition, or -1 if something went
             wrong
             Note that the returned index is a 1-based index.  A value of 0
             indicates "none" in MapInfo.
             Returns a value >= 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.WriteFontDef(ThinkGeo.MapSuite.Layers.TABFontDef)">
            <summary>
                               TABMAPFile::ReadFontDef()
             Fill the TABFontDef structure with the definition of the specified Font
             index... (1-based Font index)
             If nFontIndex==0 or is invalid, then the structure is cleared.
             Returns 0 on success, -1 on error (i.e. Font not found).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.WriteSymbolDef(ThinkGeo.MapSuite.Layers.TABSymbolDef)">
            <summary>
                               TABMAPFile::WriteSymbolDef()
             Write a Symbol Tool to the map file and return the Symbol index that has
             been attributed to this Symbol tool definition, or -1 if something went
             wrong
             Note that the returned index is a 1-based index.  A value of 0
             indicates "none" in MapInfo.
             Returns a value >= 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPFile.GetMinTABFileVersion">
            <summary>
                               TABMAPFile::GetMinTABFileVersion()
             Returns the minimum TAB file version number that can contain all the
             objects stored in this file.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock">
            <summary>
            ass to handle Read/Write operation on .MAP Header Blocks
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
             TABMAPHeaderBlock::TABMAPHeaderBlock()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.CommitToFile">
             <summary>
              TABMAPHeaderBlock::CommitToFile()
            * Commit the current state of the binary block to the file to which
            * it has been previously attached.
            * This method makes sure all values are properly set in the header
            * block buffer and then calls TABRawBinBlock::CommitToFile() to do
            * the actual writing to disk.
            * Returns 0 if succesful or -1 if an error happened, in which case
            * CPLError() will have been called.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
            TABMAPHeaderBlock::InitBlockFromData()
            Perform some initialization on the block after its binary data has
            been set or changed (or loaded from a file).
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            TABMAPHeaderBlock::InitNewBlock()
            Initialize a newly created block so that it knows to which file it
            is attached, its block size, etc . and then perform any specific
            initialization for this block type, including writing a default
            block header, etc. and leave the block ready to receive data.
            This is an alternative to calling ReadFromFile() or InitBlockFromData()
            that puts the block in a stable state without loading any initial
            data in it.
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.Int2Coordsys(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
             TABMAPHeaderBlock::Int2Coordsys()
             Convert from long integer (public) to coordinates system units
             as defined in the file's coordsys clause.
             Note that the false easting/northing and the conversion factor from
             datum to coordsys units are not included in the calculation.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.Coordsys2Int(System.Double,System.Double,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            TABMAPHeaderBlock::Coordsys2Int()
            Convert from coordinates system units as defined in the file's
            coordsys clause to long integer (public) coordinates.
            Note that the false easting/northing and the conversion factor from
            datum to coordsys units are not included in the calculation.
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.Int2CoordsysDist(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            TABMAPHeaderBlock::Int2CoordsysDist()
            Convert a pair of X and Y size (or distance) value from long integer
            (public) to coordinates system units as defined in the file's
            coordsys clause.
            The difference with Int2Coordsys() is that this function only applies
            the scaling factor: it does not apply the displacement.
            Since the calculations on the X and Y values are independent, either
            one can be omitted (i.e. passed as 0)
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.Coordsys2IntDist(System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
            TABMAPHeaderBlock::Coordsys2IntDist()
            Convert a pair of X and Y size (or distance) values from coordinates
            system units as defined in the file's coordsys clause to long integer
            (public) coordinates.
            The difference with Coordsys2Int() is that this function only applies
            the scaling factor: it does not apply the displacement.
            Since the calculations on the X and Y values are independent, either
            one can be omitted (i.e. passed as 0)
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.SetCoordsysBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            TABMAPHeaderBlock::SetCoordsysBounds()
            Take projection coordinates bounds of the newly created dataset and
            compute new values for the X/Y Scales and X/Y displacement.
            This function must be called after creating a new dataset and before any
            of the coordinates conversion functions can be used.
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.GetMapObjectSize(System.Int32)">
            <summary>
            TABMAPHeaderBlock::GetMapObjectSize()
            Return the size of the object body for the specified object type.
            The value is looked up in the first 256 bytes of the header.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.MapObjectUsesCoordBlock(System.Int32)">
            <summary>
            TABMAPHeaderBlock::MapObjectUsesCoordBlock()
            Return TRUE if the specified map object type has coordinates stored
            inside type 3 coordinate blocks.
            The info is looked up in the first 256 bytes of the header.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.GetProjInfo(ThinkGeo.MapSuite.Layers.TABProjInfo)" -->
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock.SetProjInfo(ThinkGeo.MapSuite.Layers.TABProjInfo)">
            <summary>
            TABMAPHeaderBlock::SetProjInfo()
            Set the projection parameters for this dataset.
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.ReadNextEntry(ThinkGeo.MapSuite.Layers.TABMAPIndexEntry)">
            <summary>
            TABMAPIndexBlock::ReadNextEntry()
            Read the next index entry from the block and fill the sEntry
            structure.
            Returns 0 if succesful or -1 if we reached the end of the block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.WriteNextEntry(ThinkGeo.MapSuite.Layers.TABMAPIndexEntry)">
            <summary>
            TABMAPIndexBlock::WriteNextEntry()
            Write the sEntry index entry at current position in the block.
            Returns 0 if succesful or -1 if we reached the end of the block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.ReadAllEntries">
            <summary>
            TABMAPIndexBlock::ReadAllEntries()
            Init the block by reading all entries from the data block.
            Returns 0 if succesful or -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
            TABMAPIndexBlock::TABMAPIndexBlock()
            Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
            TABMAPIndexBlock::InitBlockFromData()
            Perform some initialization on the block after its binary data has
            been set or changed (or loaded from a file).
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initialize a newly created block so that it knows to which file it
            is attached, its block size, etc . and then perform any specific
            initialization for this block type, including writing a default
            block header, etc. and leave the block ready to receive data.
            This is an alternative to calling ReadFromFile() or InitBlockFromData()
            that puts the block in a stable state without loading any initial
            data in it.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.CommitToFile">
            <summary>
            Commit the current state of the binary block to the file to which
            it has been previously attached.
            This method makes sure all values are properly set in the map object
            block header and then calls TABRawBinBlock::CommitToFile() to do
            the actual writing to disk.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.GetNumFreeEntries">
            <summary>
            TABMAPIndexBlock::GetNumFreeEntries()
            Return the number of available entries in this block.
            __TODO__ This function could eventually be improved to search
            children leaves as well.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.GetEntry(System.Int32)">
            <summary>
            Fetch a reference to the requested entry.
            @param iIndex index of entry, must be from 0 to GetNumEntries()-1.
            @return a reference to the public copy of the entry, or NULL if out
            of range.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.AddEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" -->
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.GetCurMaxDepth">
            <summary>
            Return maximum depth in the currently loaded part of the index tree
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.GetMBR(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Return the MBR for the current block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.SetMAPBlockManagerRef(ThinkGeo.MapSuite.Layers.TABBinBlockManager)">
            <summary>
            Pass a reference to the block manager object for the file this
            block belongs to.  The block manager will be used by this object
            when it needs to automatically allocate a new block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.SetParentRef(ThinkGeo.MapSuite.Layers.TABMAPIndexBlock)">
            <summary>
             Used to pass a reference to this node's parent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.SetCurChildRef(ThinkGeo.MapSuite.Layers.TABMAPIndexBlock,System.Int32)">
            <summary>
            Used to transfer a child object from one node to another
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.SplitNode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Split current Node, update the references in the parent node, etc.
            Note that Root Nodes cannot be split using this method... SplitRootNode()
            should be used instead.
            nNewEntry* are the coord. of the new entry that
            </summary>
            <returns>
            node will be the one in which the new object should be stored.
            Returns 0 on success, -1 on error.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.SplitRootNode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TABMAPIndexBlock::SplitRootNode()
            (private method)
            Split a Root Node.
            First, a level of nodes must be added to the tree, then the contents
            of what used to be the root node is moved 1 level down and then that
            node is split like a regular node.
            </summary>
            <returns>
            Returns 0 on success, -1 on error
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.UpdateCurChildMBR(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TABMAPIndexBlock::UpateCurChildMBR()
            Update current child MBR info, and propagate info in parent.
            nBlockPtr is passed only to validate the consistency of the tree.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.RecomputeMBR">
            <summary>
            TABMAPIndexBlock::RecomputeMBR()
            Recompute current block MBR, and update info in parent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.InsertEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TABMAPIndexBlock::InsertEntry()
            Add a new entry to this index block.  It is assumed that there is at
            least one free slot available, so if the block has to be split then it
            should have been done prior to calling this function.
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.ChooseSubEntryForInsert(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Select the entry in this index block in which the new entry should
            be inserted. The criteria used is to select the node whose MBR needs
            the least enlargement to include the new entry. We resolve ties by
            chosing the entry with the rectangle of smallest area.
            (This is the ChooseSubtree part of Guttman's "ChooseLeaf" algorithm.)
            </summary>
            <returns>
             Returns the index of the best candidate or -1 of node is empty.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.ChooseLeafForInsert(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TABMAPIndexBlock::ChooseLeafForInsert()
            Recursively search the tree until we find the best leaf to
            contain the specified object MBR.
            Returns the nBlockPtr of the selected leaf node entry (should be a
            ref to a TABMAPObjectBlock) or -1 on error.
            After this call, m_poCurChild will be pointing at the selected child
            node, for use by later calls to UpdateLeafEntry()
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.UpdateLeafEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TABMAPIndexBlock::UpdateLeafEntry()
            Update the MBR for specified nBlockPtr in the leaf at the end of the
            chain of m_poCurChild refs and update MBR of parents if required.
            This method requires that the chain of m_poCurChild refs already point
            to a leaf that contains the specified nBlockPtr, it is usually called
            right after ChooseLeafForInsert().
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.GetCurLeafEntryMBR(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            TABMAPIndexBlock::GetCurLeafEntryMBR()
            Get the MBR for specified nBlockPtr in the leaf at the end of the
            chain of m_poCurChild refs.
            This method requires that the chain of m_poCurChild refs already point
            to a leaf that contains the specified nBlockPtr, it is usually called
            right after ChooseLeafForInsert().
            Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.ComputeAreaDiff(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              (static method, also used by the TABMAPObjBlock class)
            Compute the area difference between two MBRs. Used in the SplitNode
            algorithm to decide to which of the two nodes an entry should be added.
            The returned AreaDiff value is positive if NodeMBR has to be enlarged
            and negative if new Entry is fully contained in the NodeMBR.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPIndexBlock.PickSeedsForSplit(ThinkGeo.MapSuite.Layers.TABMAPIndexEntry[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
                              TABMAPIndexBlock::PickSeedsForSplit()
            (static method, also used by the TABMAPObjBlock class)
            Pick two seeds to use to start splitting this node.
            Guttman's LinearPickSeed:
            - Along each dimension find the entry whose rectangle has the
              highest low side, and the one with the lowest high side
            - Calculate the separation for each pair
            - Normalize the separation by dividing by the extents of the
              corresponding dimension
            - Choose the pair with the greatest normalized separation along
              any dimension
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjArc.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjArc::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjArc.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjArc::ReadObj()
             Read Object information starting after the object id
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjCollection.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjCollection::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjCollection.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjCollection::ReadObj()
             Read Object information starting after the object id which should
             have been read by TABMAPObjHdr::ReadNextObj() already.
             This function should be called only by TABMAPObjHdr::ReadNextObj().
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjCustomPoint.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjCustomPoint::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjCustomPoint.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjCustomPoint::ReadObj()
             Read Object information starting after the object id
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock">
            <summary>
             Class to handle Read/Write operation on .MAP Object data Blocks (Type 02)
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
            TABMAPObjectBlock::TABMAPObjectBlock()
            Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.CommitToFile">
            <summary>
            TABMAPObjectBlock::CommitToFile()
            Commit the current state of the binary block to the file to which
            it has been previously attached.
            This method makes sure all values are properly set in the map object
            block header and then calls TABRawBinBlock::CommitToFile() to do
            the actual writing to disk.
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
            TABMAPObjectBlock::InitBlockFromData()
            Perform some initialization on the block after its binary data has
            been set or changed (or loaded from a file).
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initialize a newly created block so that it knows to which file it
            is attached, its block size, etc . and then perform any specific
            initialization for this block type, including writing a default
            block header, etc. and leave the block ready to receive data.
            This is an alternative to calling ReadFromFile() or InitBlockFromData()
            that puts the block in a stable state without loading any initial
            data in it.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.ReadIntCoord(System.Boolean,System.Int32@,System.Int32@)">
            <summary>
                               TABMAPObjectBlock::ReadCoord()
             Read the next pair of integer coordinates value from the block, and
             apply the translation relative to to the center of the data block
             if bCompressed=TRUE.
             This means that the returned coordinates are always absolute integer
             coordinates, even when the source coords are in compressed form.
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.WriteIntCoord(System.Int32,System.Int32,System.Boolean)">
            <summary>
                               TABMAPObjectBlock::WriteIntCoord()
             Write a pair of integer coordinates values to the current position in the
             the block.  If bCompr=TRUE then the coordinates are written relative to
             the object block center... otherwise they're written as 32 bits int.
             This function does not maintain the block's MBR and center... it is
             assumed to have been set before the first call to WriteIntCoord()
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.WriteIntMBRCoord(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                               TABMAPObjectBlock::WriteIntMBRCoord()
             Write 2 pairs of integer coordinates values to the current position
             in the the block after making sure that min values are smaller than
             max values.  Use this function to write MBR coordinates for an object.
             If bCompr=TRUE then the coordinates are written relative to
             the object block center... otherwise they're written as 32 bits int.
             This function does not maintain the block's MBR and center... it is
             assumed to have been set before the first call to WriteIntCoord()
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.UpdateMBR(System.Int32,System.Int32)">
            <summary>
                               TABMAPObjectBlock::UpdateMBR()
             Update the block's MBR and center.
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.PrepareNewObject(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
                               TABMAPObjectBlock::PrepareNewObject()
             Prepare this block to receive this new object. We only reserve space for
             it in this call. Actual data will be written only when CommitNewObject()
             is called.
             Returns the position at which the new object starts
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.CommitNewObject(ThinkGeo.MapSuite.Layers.TABMAPObjHdr)">
            <summary>
             Write the ObjHdr to this block. This is usually called after
             PrepareNewObject() once all members of the ObjHdr have
             been set.
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.AddCoordBlockRef(System.Int32)">
            <summary>
             Update the first/last coord block fields in this object to contain
             the specified block address.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.GetMBR(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
             Return the MBR for the current block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.SetMBR(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Set the MBR for the current block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjectBlock.AdvanceToNextObject(ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock)">
            <summary>
                                    Rewind()
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjFontPoint.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjFontPoint::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjFontPoint.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjFontPoint::ReadObj()
             Read Object information starting after the object id
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjHdr.NewObj(System.Byte,System.Int32)">
            <summary>
             Alloc a new object of specified type or NULL for NONE types or if type
             is not supported.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjHdr.ReadNextObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock,ThinkGeo.MapSuite.Layers.TABMAPHeaderBlock)">
            <summary>
             Read next object in this block and allocate/init a new object for it
             if succesful.
             Returns NULL in case of error or if we reached end of block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjHdr.IsCompressedType">
            <summary>
             Returns TRUE if the current object type uses compressed coordinates
             or FALSE otherwise.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjHdr.WriteObjTypeAndId(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
             Writetype+object id information... should be called only by the derived
             classes' WriteObj() methods.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjHdr.SetMBR(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                               TABMAPObjHdr::SetMBR()
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjLine.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjLine::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjLine.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjLine::ReadObj()
             Read Object information starting after the object id which should
             have been read by TABMAPObjHdr::ReadNextObj() already.
             This function should be called only by TABMAPObjHdr::ReadNextObj().
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjMultiPoint.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjMultiPoint::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjMultiPoint.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjMultiPoint::ReadObj()
             Read Object information starting after the object id which should
             have been read by TABMAPObjHdr::ReadNextObj() already.
             This function should be called only by TABMAPObjHdr::ReadNextObj().
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjPLine.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjPLine::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjPLine.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjPLine::ReadObj()
             Read Object information starting after the object id which should
             have been read by TABMAPObjHdr::ReadNextObj() already.
             This function should be called only by TABMAPObjHdr::ReadNextObj().
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjRectEllipse.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjRectEllipse::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjRectEllipse.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjRectEllipse::ReadObj()
             Read Object information starting after the object id
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjText.WriteObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjText::WriteObj()
             Write Object information with the type+object id
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPObjText.ReadObj(ThinkGeo.MapSuite.Layers.TABMAPObjectBlock)">
            <summary>
                               TABMAPObjText::ReadObj()
             Read Object information starting after the object id
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMAPToolBlock">
            <summary>
             Class to handle Read/Write operation on .MAP Drawing Tool Blocks (Type 05)
             In addition to handling the I/O, this class also maintains the list
             of Tool definitions in memory.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess)">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
             Perform some initialization on the block after its binary data has
             been set or changed (or loaded from a file).
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
                               TABMAPToolBlock::InitNewBlock()
             Initialize a newly created block so that it knows to which file it
             is attached, its block size, etc . and then perform any specific
             initialization for this block type, including writing a default
             block header, etc. and leave the block ready to receive data.
             This is an alternative to calling ReadFromFile() or InitBlockFromData()
             that puts the block in a stable state without loading any initial
             data in it.
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.CommitToFile">
            <summary>
             Commit the current state of the binary block to the file to which
             it has been previously attached.
             This method makes sure all values are properly set in the map object
             block header and then calls TABRawBinBlock::CommitToFile() to do
             the actual writing to disk.
            </summary>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            <returns>
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.SetMAPBlockManagerRef(ThinkGeo.MapSuite.Layers.TABBinBlockManager)">
            <summary>
             Pass a reference to the block manager object for the file this
             block belongs to.  The block manager will be used by this object
             when it needs to automatically allocate a new block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.ReadBytes(System.Int32,System.Byte[])">
            <summary>
             Cover function for TABRawBinBlock::ReadBytes() that will automagically
             load the next coordinate block in the chain before reading the
             requested bytes if we are at the end of the current block and if
             m_nNextToolBlock is a valid block.
             Then the control is passed to TABRawBinBlock::ReadBytes() to finish the
             work:
             Copy the number of bytes from the data block's public buffer to
             the user's buffer pointed by pabyDstBuf.
             Passing pabyDstBuf = NULL will only move the read pointer by the
             specified number of bytes as if the copy had happened... but it
             won't crash.
            </summary>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            <returns>
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.WriteBytes(System.Int32,System.Byte[])">
            <summary>
             Cover function for TABRawBinBlock::WriteBytes() that will automagically
             CommitToFile() the current block and create a new one if we are at
             the end of the current block.
             Then the control is passed to TABRawBinBlock::WriteBytes() to finish the
             work.
             Passing pabySrcBuf = NULL will only move the write pointer by the
             specified number of bytes as if the copy had happened... but it
             won't crash.
            </summary>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.SetNextToolBlock(System.Int32)">
            <summary>
             Set the address (offset from beginning of file) of the drawing tool block
             that follows the current one.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.EndOfChain">
            <summary>
             Return TRUE if we reached the end of the last block in the chain
             TABMAPToolBlocks, or FALSE if there is still data to be read from
             this chain
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMAPToolBlock.CheckAvailableSpace(System.Int32)">
            <summary>
             Check if an object of the specified type can fit in
             current block.  If it can't fit then force committing current block
             and allocating a new one.
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABMultiPoint">
            <summary>
                                  class TABMultiPoint
             Feature class to handle MapInfo Multipoint features:
                 TAB_GEOM_MULTIPOINT_C        0x34
                 TAB_GEOM_MULTIPOINT          0x35
             Feature geometry will be a OGRMultiPoint
             The symbol number is in the range [31..67], with 31=None and corresponds
             to one of the 35 predefined "Old MapInfo Symbols"
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                              TABMultiPoint::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABMultiPoint::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.GetXY(System.Int32,System.Double@,System.Double@)">
            <summary>
                               TABMultiPoint::GetXY()
             Return this point's X,Y coordinates.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.GetNumPoints">
            <summary>
                               TABMultiPoint::GetNumPoints()
             Return the number of points in this multipoint object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.GetCenter(System.Double@,System.Double@)">
            <summary>
                               TABMultiPoint::GetCenter()
             Returns the center point (or label point?) of the object.  Compute one
             if it was not explicitly set:
             The default seems to be to use the first point in the collection as
             the center.. so we'll use that.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.SetCenter(System.Double,System.Double)">
            <summary>
                               TABMultiPoint::SetCenter()
             Set the X,Y coordinates to use as center point (or label point?)
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABMultiPoint::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABMultiPoint::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABMultiPoint.DumpMIF(System.IO.Stream)">
            <summary>
             Dump feature geometry in a format similar to .MIF POINTs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABPoint">
            <summary>
                                 class TABPoint
             Feature class to handle old style MapInfo point symbols:
                 TAB_GEOM_SYMBOL_C        0x01
                 TAB_GEOM_SYMBOL          0x02
             Feature geometry will be a OGRPoint
             The symbol number is in the range [31..67], with 31=None and corresponds
             to one of the 35 predefined "Old MapInfo Symbols"
             NOTE: This class is also used as a base class for the other point
             symbol types TABFontPoint and TABCustomPoint.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABPoint::TABPoint()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABPoint::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABPoint::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.GetX">
            <summary>
                               TABPoint::GetX()
             Return this point's X coordinate.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.GetY">
            <summary>
                               TABPoint::GetY()
             Return this point's Y coordinate.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABPoint::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABPoint::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.GetStyleString">
            <summary>
                               TABPoint::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPoint.DumpMIF(System.IO.Stream)">
            <summary>
                               TABPoint::DumpMIF()
             Dump feature geometry in a format similar to .MIF POINTs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABPolyline">
            <summary>
                                  class TABPolyline
             Feature class to handle the various MapInfo line types:
                 TAB_GEOM_LINE_C         0x04
                 TAB_GEOM_LINE           0x05
                 TAB_GEOM_PLINE_C        0x07
                 TAB_GEOM_PLINE          0x08
                 TAB_GEOM_MULTIPLINE_C   0x25
                 TAB_GEOM_MULTIPLINE     0x26
                 TAB_GEOM_V450_MULTIPLINE_C 0x31
                 TAB_GEOM_V450_MULTIPLINE   0x32
             Feature geometry can be either a OGRLineString or a OGRMultiLineString
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABPolyline::TABPolyline()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABPolyline::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABPolyline::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CloneTABFeature() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.GetNumParts">
            <summary>
                               TABPolyline::GetNumParts()
             Return the total number of parts in this object.
             Returns 0 if the geometry contained in the object is invalid or missing.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.GetPartRef(System.Int32)">
            <summary>
                               TABPolyline::GetPartRef()
             Returns a reference to the specified OGRLineString number, hiding the
             complexity of dealing with OGRMultiLineString vs OGRLineString cases.
             Returns NULL if the geometry contained in the object is invalid or
             missing or if the specified part index is invalid.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABPolyline::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABPolyline::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.GetStyleString">
            <summary>
                               TABPolyline::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.DumpMIF(System.IO.Stream)">
            <summary>
                               TABPolyline::DumpMIF()
             Dump feature geometry in a format similar to .MIF PLINEs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.GetCenter(System.Double@,System.Double@)">
            <summary>
                               TABPolyline::GetCenter()
             Returns the center point of the line.  Compute one if it was not
             explicitly set:
             In MapInfo, for a simple or multiple polyline (pline), the center point
             in the object definition is supposed to be either the center point of
             the pline or the first section of a multiple pline (if an odd number of
             points in the pline or first section), or the midway point between the
             two central points (if an even number of points involved).
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABPolyline.SetCenter(System.Double,System.Double)">
            <summary>
                               TABPolyline::SetCenter()
             Set the X,Y coordinates to use as center point for the line.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABProjInfo">
            <summary>
            class used to store the projection parameters from the .MAP header
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABRawBinBlock">
            <summary>
                This is the base class used for all other data block types... it
                contains all the base functions to handle binary data.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.#ctor(ThinkGeo.MapSuite.Layers.TABAccess,System.Boolean)">
            <summary>
            TABRawBinBlock::TABRawBinBlock()
            Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.ReadFromFile(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            TABRawBinBlock::ReadFromFile()
            Load data from the specified file location and initialize the block.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.CommitToFile">
            <summary>
             TABRawBinBlock::CommitToFile()
            Commit the current state of the binary block to the file to which
            it has been previously attached.
            Derived classes may want to (optionally) reimplement this method if
            they need to do special processing before committing the block to disk.
            For files created with bHardBlockSize=TRUE, a complete block of
            the specified size is always written, otherwise only the number of
            used bytes in the block will be written to disk.
            </summary>
            <return>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </return>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.CommitAsDeleted(System.Int32)">
            <summary>
             Commit current block to file using block type 4 (garbage block)
            </summary>
            <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.InitBlockFromData(System.Byte[],System.Int32,System.Int32,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
            Set the binary data buffer and initialize the block.
            Calling ReadFromFile() will automatically call InitBlockFromData() to
            complete the initialization of the block after the data is read from the
            file.  Derived classes should implement their own version of
            InitBlockFromData() if they need specific initialization... in this
            case the derived InitBlockFromData() should call
            TABRawBinBlock::InitBlockFromData() before doing anything else.
            By default, the buffer will be copied, but if bMakeCopy = FALSE then
            it won't be copied, and the object will keep a reference to the
            user's buffer... and this object will eventually free the user's buffer.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.InitNewBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
              Initialize the block so that it knows to which file it is attached,
              its block size, etc.
              This is an alternative to calling ReadFromFile() or InitBlockFromData()
              that puts the block in a stable state without loading any initial
              data in it.
            </summary>
            <return>
              Returns 0 if succesful or -1 if an error happened, in which case
              CPLError() will have been called.
            </return>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GetBlockType">
            <summary>
            Return the block type for the current object.
            Returns a block type >= 0 if succesful or -1 if an error happened, in
            which case  CPLError() will have been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GetStartAddress">
            <summary>
            Get the read/write position of the m_fs which this object attached
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GotoByteRel(System.Int32)">
            <summary>
            Move the block pointer by the specified number of bytes relative
            to its current position.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GotoByteInBlock(System.Int32)">
            <summary>
            Move the block pointer to the specified position relative to the
            beginning of the block.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GotoByteInFile(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Move the block pointer to the specified position relative to the
            beginning of the file.
            In read access, the current block may be reloaded to contain a right
            block of binary data if necessary.
            In write mode, the current block may automagically be committed to
            disk and a new block initialized if necessary.
            bForceReadFromFile is used in write mode to read the new block data from
            file instead of creating an empty block. (Useful for TABCollection
            or other cases that need to do random access in the file in write mode.)
            bOffsetIsEndOfData is set to TRUE to indicate that the nOffset
            to which we are attempting to go is the end of the used data in this
            block (we are positioninig ourselves to append data), so if the nOffset
            corresponds to the beginning of a 512 bytes block then we should really
            be positioning ourselves at the end of the block that ends at this
            address instead of at the beginning of the blocks that starts at this
            address. This case can happen when going back and forth to write collection
            objects to a Coordblock and is documented in bug 1657.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.SetFirstBlockPtr(System.Int32)">
            <summary>
            Set the position in the file at which the first block starts.
            This value will usually be the header size and needs to be specified
            only if the header size is different from the other blocks size.
            This value will be used by GotoByteInFile() to properly align the data
            blocks that it loads automatically when a requested position is outside
            of the block currently in memory.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GetNumUnusedBytes">
            <summary>
            TABRawBinBlock::GetNumUnusedBytes()
            Return the number of unused bytes in this block.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GetFirstUnusedByteOffset">
            <summary>
            Return the position of the first unused byte in this block relative
            to the beginning of the file, or -1 if the block is full.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.GetCurAddress">
            <summary>
            Return the current pointer position, relative to beginning of file.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.ReadBytes(System.Int32,System.Byte[])">
             <summary>
              Copy the number of bytes from the data block's public buffer to
              the user's buffer pointed by pabyDstBuf.
              Passing pabyDstBuf = null will only move the read pointer by the
              specified number of bytes as if the copy had happened... but it
              won't crash.
            
             </summary>
             <returns>
             Returns 0 if succesful or -1 if an error happened, in which case
             CPLError() will have been called.
             </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.ReadByte">
            <summary>
            MapInfo files are binary files with LSB first (Intel) byte
            ordering.  The following functions will read from the input file
            and return a value with the bytes ordered properly for the current
            platform.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.WriteBytes(System.Int32,System.Byte[])">
            <summary>
            TABRawBinBlock::WriteBytes()
            Copy the number of bytes from the user's buffer pointed by pabySrcBuf
            to the data block's public buffer.
            Note that this call only writes to the memory buffer... nothing is
            written to the file until WriteToFile() is called.
            Passing pabySrcBuf = null will only move the write pointer by the
            specified number of bytes as if the copy had happened... but it
            won't crash.
            </summary>
            <returns>
            Returns 0 if succesful or -1 if an error happened, in which case
            CPLError() will have been called.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.WriteByte(System.Byte)">
            <summary>
            Arc/Info files are binary files with MSB first (Motorola) byte
            ordering.  The following functions will reorder the byte for the
            value properly and write that to the output file.
            If a problem happens, then CPLError() will be called and
            CPLGetLastErrNo() can be used to test if a write operation was
            succesful.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRawBinBlock.WriteZeros(System.Int32)">
            <summary>
            Write a number of zeros (sepcified in bytes) at the current position
            in the file.
            If a problem happens, then CPLError() will be called and
            succesful.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.UpdateMBR(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABRectangle::UpdateMBR()
             Update the feature MBR members using the geometry
             Returns 0 on success, or -1 if there is no geometry in object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABRectangle::TABRectangle()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABRectangle::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABRectangle::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABRectangle::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                              TABRectangle::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.GetStyleString">
            <summary>
                               TABRectangle::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRectangle.DumpMIF(System.IO.Stream)">
            <summary>
                               TABRectangle::DumpMIF()
             Dump feature geometry in a format similar to .MIF REGIONs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABRegion">
            <summary>
                                 class TABRegion
             Feature class to handle the MapInfo region types:
                 TAB_GEOM_REGION_C         0x0d
                 TAB_GEOM_REGION           0x0e
                 TAB_GEOM_V450_REGION_C    0x2e
                 TAB_GEOM_V450_REGION      0x2f
             Feature geometry will be returned as OGRPolygon (with a single ring)
             or OGRMultiPolygon (for multiple rings).
             REGIONs with multiple rings are returned as OGRMultiPolygon instead of
             as OGRPolygons since OGRPolygons require that the first ring be the
             outer ring, and the other all be inner rings, but this is not guaranteed
             inside MapInfo files.  However, when writing features, OGRPolygons with
             multiple rings will be accepted without problem.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.AppendSecHdrs(ThinkGeo.MapSuite.Layers.OGRPolygon,ThinkGeo.MapSuite.Layers.TABMAPCoordSecHdr[]@,ThinkGeo.MapSuite.Layers.TABMAPFile,System.Int32@)">
            <summary>
                               TABRegion::AppendSecHdrs()
             (Private method)
             Add a TABMAPCoordSecHdr for each ring in the specified polygon.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                               TABRegion::TABRegion()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABRegion::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABRegion::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.GetNumRings">
            <summary>
                               TABRegion::GetNumRings()
             Return the total number of rings in this object making it look like
             all parts of the OGRMultiPolygon (or OGRPolygon) are a single collection
             of rings... hides the complexity of handling OGRMultiPolygons vs
             OGRPolygons, etc.
             Returns 0 if the geometry contained in the object is invalid or missing.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.GetRingRef(System.Int32)">
            <summary>
                               TABRegion::GetRingRef()
             Returns a reference to the specified ring number making it look like
             all parts of the OGRMultiPolygon (or OGRPolygon) are a single collection
             of rings... hides the complexity of handling OGRMultiPolygons vs
             OGRPolygons, etc.
             Returns NULL if the geometry contained in the object is invalid or
             missing or if the specified ring index is invalid.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                              TABRegion::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABRegion::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.GetStyleString">
            <summary>
                               TABRegion::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.DumpMIF(System.IO.Stream)">
            <summary>
                               TABRegion::DumpMIF()
             Dump feature geometry in a format similar to .MIF REGIONs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.GetCenter(System.Double@,System.Double@)">
            <summary>
                               TABRegion::GetCenter()
             Returns the center/label point of the region.
             Compute one using OGRPolygonLabelPoint() if it was not explicitly set
             before.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRegion.SetCenter(System.Double,System.Double)">
            <summary>
                               TABRegion::SetCenter()
             Set the X,Y coordinates to use as center/label point for the region.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABRelation">
            <summary>
                                  class TABRelation
             Class that maintains a relation between 2 tables through a field
             in each table (the SQL "where table1.field1=table2.field2" found in
             TABView datasets).
             An instance of this class is used to read data records from the
             combined tables as if they were a single one.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.ResetAllMembers">
            <summary>
                               TABRelation::ResetAllMembers()
             Reset all class members.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.BuildFieldKey(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32)">
            <summary>
                               TABRelation::BuildFieldKey()
             Return the index key for the specified field in poFeature.
             Simply maps the call to the proper method in the TABINDFile class.
             Returns a reference to a TABINDFile public buffer that should not
             be freed by the caller.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.#ctor">
            <summary>
                               TABRelation::TABRelation()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.Init(System.String,ThinkGeo.MapSuite.Layers.TABFile,ThinkGeo.MapSuite.Layers.TABFile,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
                               TABRelation::Init()
             Set the details of the relation: the main and related tables, the fields
             through which they will be connected, and the list of fields to select.
             After this call, we are ready to read data records.
             For write access, Init() is called with pszMain/RelFieldName and
             **papszSelectedFields passed as NULL.  They will have to be set through
             other methods before a first feature can be written.
             A new OGRFeatureDefn is also built for the combined tables.
             Returns 0 on success, or -1 or error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.CreateRelFields">
            <summary>
                               TABRelation::CreateRelFields()
             For write access, create the integer fields in each table that will
             link them, and setup everything to be ready to write the first feature.
             This function should be called just before writing the first feature.
             Returns 0 on success, or -1 or error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.GetNativeFieldType(System.Int32)">
            <summary>
                               TABRelation::GetNativeFieldType()
             Returns the native MapInfo field type for the specified field.
             Returns TABFUnknown if file is not opened, or if specified field index is
             invalid.
             Note that field ids are positive and start at 0.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.GetFeature(System.Int32)">
            <summary>
                               TABRelation::GetFeature()
             Fill and return a TABFeature object for the specified feature id.
             The retuned pointer is a new TABFeature that will have to be freed
             by the caller.
             Returns NULL if the specified feature id does not exist of if an
             error happened.  In any case, CPLError() will have been called to
             report the reason of the failure.
             __TODO__ The current implementation fetches the features from each table
             and creates a 3rd feature to merge them.  There would be room for
             optimization, at least by avoiding the duplication of the geometry
             which can be big sometimes... but this would imply changes at the
             lower-level in the lib. and we won't go there yet.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.AddFieldNative(System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                               TABRelation::AddFieldNative()
             Create a new field using a native mapinfo data type... this is an
             alternative to defining fields through the OGR interface.
             This function should be called after creating a new dataset, but before
             writing the first feature.
             This function will build/update the OGRFeatureDefn that will have to be
             used when writing features to this dataset.
             A reference to the OGRFeatureDefn can be obtained using GetLayerDefn().
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.IsFieldIndexed(System.Int32)">
            <summary>
                               TABRelation::SetFieldIndexed()
             Request that the specified field be indexed.  This will create the .IND
             file, etc.
             Note that field ids are positive and start at 0.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABRelation.IsFieldUnique(System.Int32)">
            <summary>
                               TABRelation::IsFieldUnique()
             Returns TRUE is specified field is part of the unique table (poRelTable).
             Note that field ids are positive and start at 0.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABSeamless">
             <summary>
             TABSeamless is used to handle seamless .TAB files that are
             composed of a main .TAB file in which each feature is the MBR of
             a base table.
            
             TABSeamless are supported for read access only.
             </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.OpenForRead(System.String,System.Boolean)">
            <summary>
            Open for reading
            </summary>
            <param name="pszFname"></param>
            <param name="bTestOpenNoError"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.OpenBaseTable(ThinkGeo.MapSuite.Layers.TABFeature,System.Boolean)">
            <summary>
            Open the base table for specified IndexFeature.
            </summary>
            <param name="poIndexFeature"></param>
            <param name="bTestOpenNoError"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.OpenBaseTable(System.Int32,System.Boolean)">
            <summary>
            Open the base table for specified IndexFeature.
            </summary>
            <param name="nTableId"></param>
            <param name="bTestOpenNoError"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.OpenNextBaseTable(System.Boolean)">
            <summary>
            Open the next base table in the dataset, using GetNextFeature() so that
            the spatial filter is respected.
            m_bEOF will be set if there are no more base tables to read.
            </summary>
            <param name="bTestOpenNoError"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.EncodeFeatureId(System.Int32,System.Int32)">
             <summary>
             Combine the table id + feature id into a single feature id that should
             be unique amongst all base tables in this seamless dataset.
            
             We reserve some bits in the feature id for the table id based on the
             number of features in the index table.  This reduces the available range
             of feature ids for each base table... for instance, if the index contains
             65000 entries, then each base table will be limited to 65535 features.
            
             If the number of features in a base table exceeds the number of bits
             available (e.g. 65535 inthe above example) then the feature ids will
             wrap for this table and thus it will be impossible to access some of
             the features unless the caller uses only calls to GetNextFeature() and
             avoids calls to GetFeatureRef().
             </summary>
             <param name="nTableId"></param>
             <param name="nBaseFeatureId"></param>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.Close">
            <summary>
            Close current file, and release all memory used
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
             <summary>
              Open a seamless .TAB dataset and initialize the structures to be ready
             to read features from it.
            
             Seamless .TAB files are composed of a main .TAB file in which each
             feature is the MBR of a base table.
            
             Set bTestOpenNoError=true to silently return -1 with no error message
             if the file cannot be opened.  This is intended to be used in the
             context of a TestOpen() function.  The default value is false which
             means that an error is reported if the file cannot be opened.
             </summary>
             <param name="pszFname"></param>
             <param name="pszAccess"></param>
             <param name="bTestOpenNoError"></param>
             <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.SetSpatialFilter(ThinkGeo.MapSuite.Layers.OGRGeometry)">
            <summary>
            Standard OGR SetSpatialFiltere implementation.  This methode is used
            to set a SpatialFilter for this OGRLayer
            </summary>
            <param name="poGeomIn"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetExtent(ThinkGeo.MapSuite.Layers.OGREnvelope,System.Boolean)">
            <summary>
            Fetch extent of the data currently stored in the dataset.
            The bForce flag has no effect on TAB files since that value is
            always in the header.
            </summary>
            <param name="psExtent"></param>
            <param name="bForce"></param>
            <returns>Returns OGRERR_NONE/OGRRERR_FAILURE.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetNextFeatureId(System.Int32)">
            <summary>
            Returns feature id that follows nPrevId, or -1 if it is the
            last feature id.  Pass nPrevId=-1 to fetch the first valid feature id.
            </summary>
            <param name="nPrevId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetFeatureRef(System.Int32)">
            <summary>
            Fill and return a TABFeature object for the specified feature id.
            The returned pointer is a reference to an object owned and maintained
            by this TABSeamless object.  It should not be altered or freed by the
            caller and its contents is guaranteed to be valid only until the next
            call to GetFeatureRef() or Close().
            </summary>
            <param name="nFeatureId"></param>
            <returns>
            Returns null if the specified feature id does not exist of if an
            error happened.  In any case, CPLError() will have been called to
            report the reason of the failure.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetLayerDefn">
             <summary>
             Returns a reference to the OGRFeatureDefn that will be used to create
             features in this dataset.
            
             Returns a reference to an object that is maintained by this TABSeamless
             object (and thus should not be modified or freed by the caller) or
             null if the OGRFeatureDefn has not been initialized yet (i.e. no file
             opened yet)
             </summary>
             <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetNativeFieldType(System.Int32)">
            <summary>
            Returns the native MapInfo field type for the specified field.
            Returns TABFieldType.TABFUnknown if file is not opened, or if specified field index is
            invalid.
            Note that field ids are positive and start at 0.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Fetch projection coordinates bounds of a dataset.
            The bForce flag has no effect on TAB files since the bounds are
            always in the header.
            </summary>
            <param name="dXMin"></param>
            <param name="dYMin"></param>
            <param name="dXMax"></param>
            <param name="dYMax"></param>
            <param name="bForce"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetSpatialRef">
            <summary>
            Returns a reference to an OGRSpatialReference for this dataset.
            If the projection parameters have not been parsed yet, then we will
            parse them before returning.
            The returned object is owned and maintained by this TABFile and
            should not be modified or freed by the caller.
            </summary>
            <returns>Returns null if the SpatialRef cannot be accessed.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.GetFeatureCountByType(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
             <summary>
             Return number of features of each type.
             Note that the sum of the 4 returned values may be different from
             the total number of features since features with NONE geometry
             are not taken into account here.
             </summary>
             <param name="numPoints"></param>
             <param name="numLines"></param>
             <param name="numRegions"></param>
             <param name="numTexts"></param>
             <param name="bForce"></param>
             <returns>
             Returns 0 on success, or silently returns -1 (with no error) if this
            information is not available.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.IsFieldIndexed(System.Int32)">
            <summary>
            Returns true if field is indexed, or false otherwise.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABSeamless.IsFieldUnique(System.Int32)">
            <summary>
            Returns true if field is in the Unique table, or false otherwise.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABSymbolDef">
            <summary>
            TABSymbolDef - Symbol definition information
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABTableType">
            <summary>
             TABTableType - Attribute table format
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABText">
            <summary>
                                  class TABText
             Feature class to handle the MapInfo text types:
                 TAB_GEOM_TEXT_C         0x10
                 TAB_GEOM_TEXT           0x11
             Feature geometry is an OGRPoint corresponding to the lower-left
             corner of the text MBR BEFORE ROTATION.
            
             Text string, and box height/width (box before rotation is applied)
             are required in a valid text feature and MUST be set.
             Text angle and other styles are optional.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.#ctor(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                              TABText::TABText()
             Constructor.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.UpdateMBR(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABText::UpdateMBR()
             Update the feature MBR using the text origin (OGRPoint geometry), the
             rotation angle, and the Width/height before rotation.
             This function cannot perform properly unless all the above have been set.
             Returns 0 on success, or -1 if there is no geometry in object
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.ValidateMapInfoType(ThinkGeo.MapSuite.Layers.TABMAPFile)">
            <summary>
                               TABText::ValidateMapInfoType()
             Check the feature's geometry part and return the corresponding
             mapinfo object type code.  The m_nMapInfoType member will also
             be updated for further calls to GetMapInfoType();
             Returns TAB_GEOM_NONE if the geometry is not compatible with what
             is expected for this object class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.CloneTABFeature(ThinkGeo.MapSuite.Layers.OGRFeatureDefn)">
            <summary>
                                 TABText::CloneTABFeature()
             Duplicate feature, including stuff specific to each TABFeature type.
             This method calls the generic TABFeature::CopyTABFeatureBase() and
             then copies any members specific to its own type.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.ReadGeometryFromMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABText::ReadGeometryFromMAPFile()
             Fill the geometry and representation (color, etc...) part of the
             feature from the contents of the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to the beginning of
             a map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.WriteGeometryToMAPFile(ThinkGeo.MapSuite.Layers.TABMAPFile,ThinkGeo.MapSuite.Layers.TABMAPObjHdr,System.Boolean,ThinkGeo.MapSuite.Layers.TABMAPCoordBlock@)">
            <summary>
                               TABText::WriteGeometryToMAPFile()
             Write the geometry and representation (color, etc...) part of the
             feature to the .MAP object pointed to by poMAPFile.
             It is assumed that poMAPFile currently points to a valid map object.
             Returns 0 on success, -1 on error, in which case CPLError() will have
             been called.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetStyleString">
            <summary>
                               TABText::GetStyleString()
             Return style string for this feature.
             Style String is built only once during the first call to GetStyleString().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.DumpMIF(System.IO.Stream)">
            <summary>
                               TABText::DumpMIF()
             Dump feature geometry in a format similar to .MIF REGIONs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextString">
            <summary>
                               TABText::GetTextString()
             Return ref to text string value.
             Returned string is a reference to the public string buffer and should
             not be modified or freed by the caller.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextAngle">
            <summary>
                               TABText::GetTextAngle()
             Return text angle in degrees.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextBoxHeight">
            <summary>
                               TABText::GetTextBoxHeight()
             Return text height in Y axis coord. units of the text box before rotation.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextBoxWidth">
            <summary>
                               TABText::GetTextBoxWidth()
             Return text width in X axis coord. units. of the text box before rotation.
             If value has not been set, then we force a default value that assumes
             that one char's box width is 60% of its height... and we ignore
             the multiline case.  This should not matter when the user PROPERLY sets
             the value.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetFontFGColor">
            <summary>
                               TABText::GetFontFGColor()
             Return foreground color.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetFontBGColor">
            <summary>
                               TABText::GetFontBGColor()
             Return background color.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextLineEndPoint(System.Double@,System.Double@)">
            <summary>
                               TABText::GetTextLineEndPoint()
             Return X,Y coordinates of the text label line end point.
             Default is the center of the text MBR.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextJustification">
            <summary>
                               TABText::GetTextJustification()
             Return text justification.  Default is TABTJLeft
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextSpacing">
            <summary>
                               TABText::GetTextSpacing()
             Return text vertical spacing factor.  Default is TABTSSingle
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetTextLineType">
            <summary>
                               TABText::GetTextLineType()
             Return text line (arrow) type.  Default is TABTLNoLine
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.QueryFontStyle(ThinkGeo.MapSuite.Layers.TABFontStyle)">
            <summary>
                               TABText::QueryFontStyle()
             Return TRUE if the specified font style attribute is turned ON,
             or FALSE otherwise.  See enum TABFontStyle for the list of styles
             that can be queried on.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.SetTextString(System.Char[])">
            <summary>
                               TABText::SetTextString()
             Set new text string value.
             Note: The text string may contain "\n" chars or Path.Spliter chars
             and we expect to receive them in a 2 chars escaped form as
             described in the MIF format specs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABText.GetFontStyleMIFValue">
            <summary>
                               TABText::GetFontStyleMIFValue()
             Return the Font Style value for this object using the style values
             that are used in a MIF FONT() clause.  See MIF specs (appendix A).
             The reason why we have to differentiate between the TAB and the MIF font
             style values is that in TAB, TABFSBox is included in the style value
             as code 0x100, but in MIF it is not included, instead it is implied by
             the presence of the BG color in the FONT() clause (the BG color is
             present only when TABFSBox or TABFSHalo is set).
             This also has the effect of shifting all the other style values > 0x100
             by 1 byte.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABTextLineType">
            <summary>
            Definitions for text attributes
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABToolDefTable">
            <summary>
                                  class TABToolDefTable
             Class to handle the list of Drawing Tool Definitions for a dataset
             This class also contains methods to read tool defs from the file and
             write them to the file.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.ReadAllToolDefs(ThinkGeo.MapSuite.Layers.TABMAPToolBlock)">
            <summary>
                               TABToolDefTable::ReadAllToolDefs()
             Read all tool definition blocks until we reach the end of the chain.
             This function will be called only once per dataset, after that
             we keep all the tool definitions in memory.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.WriteAllToolDefs(ThinkGeo.MapSuite.Layers.TABMAPToolBlock)">
            <summary>
                               TABToolDefTable::WriteAllToolDefs()
             Write all tool definition structures to the TABMAPToolBlock.
             Note that at the end of this call, poBlock.CommitToFile() will have
             been called.
             Returns 0 on success, -1 on error.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetPenDefRef(System.Int32)">
            <summary>
                               TABToolDefTable::GetPenDefRef()
             Return a reference to the specified Pen tool definition, or NULL if
             specified index is invalid.
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.AddPenDefRef(ThinkGeo.MapSuite.Layers.TABPenDef)">
            <summary>
                               TABToolDefTable::AddPenDefRef()
             Either create a new PenDefRef or add a reference to an existing one.
             Return the pen index that has been attributed to this Pen tool
             definition, or -1 if something went wrong
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetNumPen">
            <summary>
                               TABToolDefTable::GetNumPen()
             Return the number of valid pen indexes for this .MAP file
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetBrushDefRef(System.Int32)">
            <summary>
                               TABToolDefTable::GetBrushDefRef()
             Return a reference to the specified Brush tool definition, or NULL if
             specified index is invalid.
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.AddBrushDefRef(ThinkGeo.MapSuite.Layers.TABBrushDef)">
            <summary>
                               TABToolDefTable::AddBrushDefRef()
             Either create a new BrushDefRef or add a reference to an existing one.
             Return the Brush index that has been attributed to this Brush tool
             definition, or -1 if something went wrong
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetNumBrushes">
            <summary>
                               TABToolDefTable::GetNumBrushes()
             Return the number of valid Brush indexes for this .MAP file
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetFontDefRef(System.Int32)">
            <summary>
                               TABToolDefTable::GetFontDefRef()
             Return a reference to the specified Font tool definition, or NULL if
             specified index is invalid.
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.AddFontDefRef(ThinkGeo.MapSuite.Layers.TABFontDef)">
            <summary>
                               TABToolDefTable::AddFontDefRef()
             Either create a new FontDefRef or add a reference to an existing one.
             Return the Font index that has been attributed to this Font tool
             definition, or -1 if something went wrong
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetNumFonts">
            <summary>
                               TABToolDefTable::GetNumFonts()
             Return the number of valid Font indexes for this .MAP file
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetSymbolDefRef(System.Int32)">
            <summary>
                               TABToolDefTable::GetSymbolDefRef()
             Return a reference to the specified Symbol tool definition, or NULL if
             specified index is invalid.
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.AddSymbolDefRef(ThinkGeo.MapSuite.Layers.TABSymbolDef)">
            <summary>
                               TABToolDefTable::AddSymbolDefRef()
             Either create a new SymbolDefRef or add a reference to an existing one.
             Return the Symbol index that has been attributed to this Symbol tool
             definition, or -1 if something went wrong
             Note that nIndex is a 1-based index.  A value of 0 indicates "none"
             in MapInfo.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetNumSymbols">
            <summary>
                               TABToolDefTable::GetNumSymbols()
             Return the number of valid Symbol indexes for this .MAP file
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABToolDefTable.GetMinVersionNumber">
            <summary>
                               TABToolDefTable::GetMinVersionNumber()
             Returns the minimum file version number that can accept all the
             tool objects currently defined.
             Default is 300, and currently 450 can be returned if file contains
             pen widths defined in points.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TABView">
            <summary>
            TABView is used to handle special type of .TAB files that are
            composed of a number of .TAB datasets linked through some indexed
            fields.
            NOTE: The current implementation supports only TABViews composed
            of 2 TABFiles linked through an indexed field of integer type.
            It is unclear if any other type of views could exist anyways.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.OpenForRead(System.String,System.Boolean)">
            <summary>
            Open for reading
            </summary>
            <param name="pszFname"></param>
            <param name="bTestOpenNoError"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.OpenForWrite(System.String)">
            <summary>
            Create a new TABView dataset
            </summary>
            <param name="pszFname"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.ParseTABFile(System.String,System.Boolean)">
            <summary>
            Scan the lines of the TAB file, and store any useful information into
            class members.  The main piece of information being the sub-table
            names, and the list of fields to include in the view that we will
            use to build the OGRFeatureDefn for this file.
            It is assumed that the TAB header file is already loaded in m_papszTABFile
            This private method should be used only during the Open() call.
            </summary>
            <param name="pszDatasetPath"></param>
            <param name="bTestOpenNoError"></param>
            <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.WriteTABFile">
            <summary>
            Generate the TAB header file.  This is usually done during the
            Close() call.
            </summary>
            <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.Close">
            <summary>
            Close current file, and release all memory used.
            </summary>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.Open(System.String,ThinkGeo.MapSuite.Layers.GeoFileReadWriteMode,System.Boolean)">
            <summary>
            Open a .TAB dataset and the associated files, and initialize the
            structures to be ready to read features from it.
            This class is used to open .TAB files that define a view on
            two other .TAB files.  Regular .TAB datasets should be opened using
            the TABFile class instead.
            Set bTestOpenNoError=TRUE to silently return -1 with no error message
            if the file cannot be opened.  This is intended to be used in the
            context of a TestOpen() function.  The default value is FALSE which
            means that an error is reported if the file cannot be opened.
            </summary>
            <param name="pszFname"></param>
            <param name="pszAccess"></param>
            <param name="bTestOpenNoError"></param>
            <returns> Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.SetQuickSpatialIndexMode(System.Boolean)">
            <summary>
            Select "quick spatial index mode".
            The default behavior of MITAB is to generate an optimized spatial index,
            but this results in slower write speed.
            Applications that want faster write speed and do not care
            about the performance of spatial queries on the resulting file can
            use SetQuickSpatialIndexMode() to require the creation of a non-optimal
            spatial index (actually emulating the type of spatial index produced
            by MITAB before version 1.6.0). In this mode writing files can be
            about 5 times faster, but spatial queries can be up to 30 times slower.
            </summary>
            <param name="bQuickSpatialIndexMode"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetNextFeatureId(System.Int32)">
            <summary>
            Returns feature id that follows nPrevId, or -1 if it is the
            last feature id.  Pass nPrevId=-1 to fetch the first valid feature id.
            </summary>
            <param name="nPrevId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetFeatureRef(System.Int32)">
            <summary>
            Fill and return a TABFeature object for the specified feature id.
            The retruned pointer is a reference to an object owned and maintained
            by this TABView object.  It should not be altered or freed by the
            caller and its contents is guaranteed to be valid only until the next
            call to GetFeatureRef() or Close().
            </summary>
            <param name="nFeatureId"></param>
            <returns>
            Returns null if the specified feature id does not exist of if an
            error happened.  In any case, CPLError() will have been called to
            report the reason of the failure.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.SetFeature(ThinkGeo.MapSuite.Layers.TABFeature,System.Int32)">
            <summary>
            Write a feature to this dataset.
            For now only sequential writes are supported (i.e. with nFeatureId=-1)
            but eventually we should be able to do random access by specifying
            a value through nFeatureId.
            </summary>
            <param name="poFeature"></param>
            <param name="nFeatureId"></param>
            <returns>
            Returns the new featureId (> 0) on success, or -1 if an
            error happened in which case, CPLError() will have been called to
            report the reason of the failure.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetLayerDefn">
            <summary>
            Returns a reference to the OGRFeatureDefn that will be used to create
            features in this dataset.
            Returns a reference to an object that is maintained by this TABView
            object (and thus should not be modified or freed by the caller) or
            null if the OGRFeatureDefn has not been initialized yet (i.e. no file
            opened yet)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.SetFeatureDefn(ThinkGeo.MapSuite.Layers.OGRFeatureDefn,System.Collections.Generic.List{ThinkGeo.MapSuite.Layers.TABFieldType})">
            <summary>
            Set the FeatureDefn for this dataset
            For now, fields passed through SetFeatureDefn will not be mapped
            properly, so this function can be used only with an empty feature defn.
            </summary>
            <param name="poFeatureDefn"></param>
            <param name="paeMapInfoNativeFieldTypes"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetNativeFieldType(System.Int32)">
            <summary>
            Returns the native MapInfo field type for the specified field.
            Returns TABFieldType.TABFUnknown if file is not opened, or if specified field index is
            invalid.
            Note that field ids are positive and start at 0.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.AddFieldNative(System.String,ThinkGeo.MapSuite.Layers.TABFieldType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
             Create a new field using a native mapinfo data type... this is an
            alternative to defining fields through the OGR interface.
            This function should be called after creating a new dataset, but before
            writing the first feature.
            This function will build/update the OGRFeatureDefn that will have to be
            used when writing features to this dataset.
            A reference to the OGRFeatureDefn can be obtained using GetLayerDefn().
            </summary>
            <param name="pszName"></param>
            <param name="eMapInfoType"></param>
            <param name="nWidth"></param>
            <param name="nPrecision"></param>
            <param name="bIndexed"></param>
            <param name="bUnique"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.SetFieldIndexed(System.Int32)">
            <summary>
            Request that a field be indexed.  This will create the .IND file if
            necessary, etc.
            Note that field ids are positive and start at 0.
            </summary>
            <param name="nFieldId"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.IsFieldIndexed(System.Int32)">
            <summary>
            Returns TRUE if field is indexed, or FALSE otherwise.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.IsFieldUnique(System.Int32)">
            <summary>
            Returns TRUE if field is in the Unique table, or FALSE otherwise.
            </summary>
            <param name="nFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Fetch projection coordinates bounds of a dataset.
            The bForce flag has no effect on TAB files since the bounds are
            always in the header.
            </summary>
            <param name="dXMin"></param>
            <param name="dYMin"></param>
            <param name="dXMax"></param>
            <param name="dYMax"></param>
            <param name="bForce"></param>
            <returns>Returns 0 on success, -1 on error.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetExtent(ThinkGeo.MapSuite.Layers.OGREnvelope,System.Boolean)">
            <summary>
            Fetch extent of the data currently stored in the dataset.
            The bForce flag has no effect on TAB files since that value is
            always in the header.
            </summary>
            <param name="psExtent"></param>
            <param name="bForce"></param>
            <returns>Returns OGRERR_NONE/OGRRERR_FAILURE.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetFeatureCountByType(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Return number of features of each type.
            Note that the sum of the 4 returned values may be different from
            the total number of features since features with NONE geometry
            are not taken into account here.
            </summary>
            <param name="numPoints"></param>
            <param name="numLines"></param>
            <param name="numRegions"></param>
            <param name="numTexts"></param>
            <param name="bForce"></param>
            <returns>
            Returns 0 on success, or silently returns -1 (with no error) if this
            information is not available.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TABView.GetSpatialRef">
            <summary>
            Returns a reference to an OGRSpatialReference for this dataset.
            If the projection parameters have not been parsed yet, then we will
            parse them before returning.
            The returned object is owned and maintained by this TABFile and
            should not be modified or freed by the caller.
            </summary>
            <returns>
            Returns null if the SpatialRef cannot be accessed.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TabDbfColumn.#ctor">
            <summary>This method is the constructor for the DbfColumn.</summary>
            <overloads>This is the default constructor.</overloads>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TabDbfColumn.#ctor(System.String,ThinkGeo.MapSuite.Layers.DbfColumnType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>This method is the constructor for the DbfColumn.</summary>
            <overloads>This constructor is intended to be used to create the object.</overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="columnName">This parameter represents the name of the column in the DBF.</param>
            <param name="columnType">This parameter represents the type of the column in the DBF.</param>
            <param name="length">This parameter represents the length of the column in the DBF.</param>
            <param name="decimalLength">
            This parameter represents the number of decimal places the column has, if it is a
            numeric type.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabDbfColumn.BuildIndex">
            <summary>
            This property returns the index of the column in the DBF.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabDbfColumn.UniqueIndexColumnValues">
            <summary>
            This property returns the value of the column in the DBF is unique or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureSource.RequireIndex">
            <summary>
            This property gets and sets the requirement of index when reading data. The default value is true.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.MitabExceptionDescription">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ByteOrderError">
            <summary>
              Looks up a localized string similar to CPLVerifyConfiguration(): byte order set wrong.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLCallocException">
            <summary>
              Looks up a localized string similar to CPLCalloc(): Out of memory allocating {0:d} bytes.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CplConvFile">
            <summary>
              Looks up a localized string similar to CplConv.cs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLCSV">
            <summary>
              Looks up a localized string similar to CPL_CSV.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLDeaccess">
            <summary>
              Looks up a localized string similar to CPLDeaccess( {0} ) - no match..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CplDebug">
            <summary>
              Looks up a localized string similar to CPL_DEBUG.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLDumpSharedListStr">
            <summary>
              Looks up a localized string similar to {0,2:d} {1} {2,4} {3}.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CplError">
            <summary>
              Looks up a localized string similar to CPLError.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLErrorFileName">
            <summary>
              Looks up a localized string similar to CPLError.cs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLErrorLine">
            <summary>
              Looks up a localized string similar to 141.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CplLogErrors">
            <summary>
              Looks up a localized string similar to CPL_LOG_ERRORS.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CPLLogFile">
            <summary>
              Looks up a localized string similar to CPL_LOG.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CplTimeStamp">
            <summary>
              Looks up a localized string similar to CPL_TIMESTAMP.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.CSLLoad">
            <summary>
              Looks up a localized string similar to CSLLoad({0}).
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to The specify directory not found.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.DisastrousError">
            <summary>
              Looks up a localized string similar to Disastrous error for current program.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.EnumerationOutOfRange">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.EnumerationOutOfRange1">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.EvaluationExpired">
            <summary>
              Looks up a localized string similar to Evaluation Expired..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.EvaluationExpired1">
            <summary>
              Looks up a localized string similar to Evaluation Expired..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FailedUnlink">
            <summary>
              Looks up a localized string similar to Failed to unlink {0}.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotEditable">
            <summary>
              Looks up a localized string similar to The FeatureSource is not editable..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotEditable1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not editable..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotInTransaction">
            <summary>
              Looks up a localized string similar to The FeatureSource is not in a transaction..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotInTransaction1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not in a transaction..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotOpen">
            <summary>
              Looks up a localized string similar to The FeatureSource is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FeatureSourceIsNotOpen1">
            <summary>
              Looks up a localized string similar to The FeatureSource is not open.   Please call the Open method before calling this method..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The file already exists..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileAlreadyExists1">
            <summary>
              Looks up a localized string similar to The file already exists..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileIsNotExist">
            <summary>
              Looks up a localized string similar to The file specified does not exist..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileIsNotExist1">
            <summary>
              Looks up a localized string similar to The file specified does not exist..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileNotFound">
            <summary>
              Looks up a localized string similar to The specify file not found,check the filename and path please.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.FileSystemObjNoExist">
            <summary>
              Looks up a localized string similar to It seems no file system object called {0} exists..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.OpenedFileCount">
            <summary>
              Looks up a localized string similar to {0} Shared files open..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.OutOfMemoryError">
            <summary>
              Looks up a localized string similar to CPLMalloc(): Out of memory allocating {0} bytes.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.OutOfRange">
            <summary>
              Looks up a localized string similar to the value out of range.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ParameterIsNull">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ParameterIsNull1">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ReadFileFailed">
            <summary>
              Looks up a localized string similar to Read of file {0} failed..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ReallocFail">
            <summary>
              Looks up a localized string similar to CPLRealloc(): Out of memory allocating {0} bytes.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.SillySize">
            <summary>
              Looks up a localized string similar to CPLMalloc({0}): Silly size requested.\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.StrFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.String">
            <summary>
              Looks up a localized string similar to MitabExceptionDescription.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.SystemError">
            <summary>
              Looks up a localized string similar to The client system is not Win32 system.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.SystemName">
            <summary>
              Looks up a localized string similar to Win32.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.TabFileHandleIsNull">
            <summary>
              Looks up a localized string similar to Please open the tab file before getting the projection information..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.TabFileNameIsInvalid">
            <summary>
              Looks up a localized string similar to The tab file name is invalid..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.TabFileNameIsInvalid1">
            <summary>
              Looks up a localized string similar to The tab file name is invalid..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.TabRelativeFileNotFound">
            <summary>
              Looks up a localized string similar to The {0} file does not exist..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.ThreadSlotError">
            <summary>
              Looks up a localized string similar to Thread Local Store Slot fulled or it over limited.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.UnableFindFile">
            <summary>
              Looks up a localized string similar to Unable to find file handle {0} in CPLCloseShared()..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.UnlinkFailed">
            <summary>
              Looks up a localized string similar to Failed to unlink {0}.\nUnrecognised filesystem object..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.VarSizeError">
            <summary>
              Looks up a localized string similar to sizeof(GInt32) == {0:d} ... yow!\n.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.VSIDebug3VSIOpen">
            <summary>
              Looks up a localized string similar to VSIFOpen({0},{1}) = {2}.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.VSIFRead">
            <summary>
              Looks up a localized string similar to VSIFRead({0},{1}) = {2}.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.VSIFTell">
            <summary>
              Looks up a localized string similar to VSIFTell({0}) = {1}d.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.MitabExceptionDescription.VSIRewind">
            <summary>
              Looks up a localized string similar to VSIRewind({0}).
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayer.RequireIndex">
            <summary>
            This property gets and sets whether an index is required when reading data. The default value is true.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription.FeatureSourceIsInTransaction">
            <summary>
              Looks up a localized string similar to The operation is invalid when it&apos;s in a transaction..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription.TabIndexFileNotExisted">
            <summary>
              Looks up a localized string similar to The corresponding idx/ids file cannot be found. Please use the static method TabFeatureSource.BuildIndexFile() or TabFeatureLayer.BuildIndexFile() to build the idx/ids file, which can greatly improve the querying performance. If the RequireIndex Property is set to false, the idx/ids files will not be checked and an internal spatial index will be created instead..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabFeatureLayerExceptionDescription.WkbIsInvalid">
            <summary>
              Looks up a localized string similar to The format of the well known binary is incorrect..
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TabResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TabResources.ProjInfoData_txt">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
    </members>
</doc>
