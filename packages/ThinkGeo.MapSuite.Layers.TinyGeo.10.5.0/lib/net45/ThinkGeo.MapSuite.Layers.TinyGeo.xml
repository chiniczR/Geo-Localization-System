<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkGeo.MapSuite.Layers.TinyGeo</name>
    </assembly>
    <members>
        <member name="T:ThinkGeo.MapSuite.Layers.TinyGeoPrecisionMode">
            <summary>
            One TinyGeo file can be internally splitted into multi regions. The more precise 
            the data is, the smaller the region has to be and the more regions one file will 
            have. With splitting the data into regions, the data itself is also splitted so the 
            number of records are increased; on the other side each record is smaller so there are 
            fewer chance to load a huge shape for just rendering a small area of it. 
            The split region of a TinyGeo file is defined by the PricisionInMeter parameter in the 
            Create method, while this enum TinyGeoPrecisionMode affects the max Precision TinyGeo 
            can be.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.TinyGeoPrecisionMode.AllowSplitting">
            <summary>
            Don't allow any splitting. In this case the precision will be low.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.TinyGeoPrecisionMode.PreventSplitting">
            <summary>
            Allow splitting. In this case the precision will be high and the created TinyGeo 
            file will usually include multi regions internally. 
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer">
            <summary>This class represents a FeatureLayer of TinyGeo File by ThinkGeo.</summary>
            <remarks>None</remarks>
        </member>
        <member name="E:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.StreamLoading">
            <summary>
            This event allows you to pass in your own stream to represent the
            files.
            </summary>
            <remarks>
            If you choose you can pass in your own stream to represent the file. The
            stream can come from a variety of places such as isolated storage, a compressed file,
            and encrypted stream. When the Image is finished with the stream it will dispose
            of it so be sure to keep this in mind when passing the stream in. If you do not pass in
            a alternate stream the class will attempt to load the file from the file system
            using the TinyGeoPathFilename property.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.#ctor">
            <summary>This is the class constructor.</summary>
            <overloads>
            This is the default constructor and requires you to set the properties after you
            create the class.
            </overloads>
            <remarks>None</remarks>
            <returns>None</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.#ctor(System.String)">
            <summary>This is the class constructor.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <overloads>
            This constructor allows you to pass in a path and file name to the TinyGeo FeatureLayer.
            </overloads>
            <param name="shapePathFilename">This parameter represents the path and file name to the .tgeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.#ctor(System.String,System.String)">
            <summary>This is the class constructor.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <overloads>
            This constructor allows you to pass in a path file name and a password to the TinyGeo FeatureLayer.
            </overloads>
            <param name="shapePathFilename">This parameter represents the path and file name to the .tgeo file.</param>
            <param name="password">This parameter represents the password to the .tgeo file.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.TinyGeoPathFilename">
            <summary>This property returns the path and file of the TinyGeo file you want to use.</summary>
            <decimalDegreesValue>This property returns the path and file of the TinyGeo file you want to use.</decimalDegreesValue>
            <remarks>
            When you specify the path and file name it should be in the correct format as
            such however the file does not need to exists on the file system. This is to allow us
            to accept streams supplied by the developer at runtime. If you choose to provide a file
            that exists then we will attempt to use it. If we cannot find it then we will raise the
            SteamLoading event and allow you to supply the stream. For example you can pass in
            "C:\NotARealPath\File1.tgeo" which does not exists on the file system. When we raise the
            event for you to supply a stream we will pass to you the path and file name for you to
            differentiate the files.
            </remarks>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Setting an invalid FilePathName structure will thrown an ArgumentException.</exception>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.Password">
            <summary>
            This property gets or sets the password of the TinyGeo file.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.String)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.String,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String,System.Double,System.Text.Encoding)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
            <param name="shapeEncoding">This parameter specifies the encoding of the existed shape file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.EncryptTinyGeoFile(System.String,System.String,System.String)">
            <summary>
            Encrypt an existed TinyGeo File and save it as a new TinyGeo File.
            </summary>
            <param name="unencryptedTinyGeoPathFilename">This parameter specifies the file name for the source unencrypted TinyGeo file.</param>
            <param name="encryptedTinyGeoPathFilename">This parameter specifies the file name for the target encrypted TinyGeo file.</param>
            <param name="password">This parameter specified the password of the target encrypted TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureLayer.DecryptTinyGeoFile(System.String,System.String,System.String)">
            <summary>
            Decrypt an existed encrypted TinyGeo File and save it as a new TinyGeo File.
            </summary>
            <param name="encryptedTinyGeoPathFilename">This parameter specifies the file name for the source encrypted TinyGeo file.</param>
            <param name="decryptedTinyGeoPathFilename">This parameter specifies the file name for the target decrypted TinyGeo file.</param>
            <param name="password">This parameter specified the password of the source encrypted TinyGeo file. </param>
        </member>
        <member name="T:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource">
            <summary>This class represents a FeatureSource of TinyGeo File by ThinkGeo.</summary>
            <remarks>None</remarks>
        </member>
        <member name="E:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.StreamLoading">
            <summary>
            This event allows you to pass in your own stream to represent the
            files.
            </summary>
            <remarks>
            If you choose you can pass in your own stream to represent the file. The
            stream can come from a variety of places such as isolated storage, a compressed file,
            and encrypted stream. When the Image is finished with the stream it will dispose
            of it so be sure to keep this in mind when passing the stream in. If you do not pass in
            a alternate stream the class will attempt to load the file from the file system
            using the TinyGeoPathFilename property.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.#ctor">
            <summary>This is the class constructor.</summary>
            <overloads>
            This is the default constructor and requires you to set the properties after you
            create the class.
            </overloads>
            <remarks>None</remarks>
            <returns>None</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.#ctor(System.String)">
            <summary>This is the class constructor.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <overloads>
            This constructor allows you to pass in a path and file name to the TinyGeo FeatureSource.
            </overloads>
            <param name="tinyGeoPathFilename">This parameter represents the path and file name to the .tgeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.#ctor(System.String,System.String)">
            <summary>This is the class constructor.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
            <overloads>
            This constructor allows you to pass in a path file name and a password to the TinyGeo FeatureSource.
            </overloads>
            <param name="tinyGeoPathFilename">This parameter represents the path and file name to the .tgeo file.</param>
            <param name="password">This parameter represents the password to the .tgeo file.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.Password">
            <summary>
            This property gets or sets the password of the TinyGeo file.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.TinyGeoPathFilename">
            <summary>This property returns the path and file of the TinyGeo file you want to use.</summary>
            <decimalDegreesValue>This property returns the path and file of the TinyGeo file you want to use.</decimalDegreesValue>
            <remarks>
            When you specify the path and file name it should be in the correct format as
            such however the file does not need to exists on the file system. This is to allow us
            to accept streams supplied by the developer at runtime. If you choose to provide a file
            that exists then we will attempt to use it. If we cannot find it then we will raise the
            SteamLoading event and allow you to supply the stream. For example you can pass in
            "C:\NotARealPath\File1.tgeo" which does not exists on the file system. When we raise the
            event for you to supply a stream we will pass to you the path and file name for you to
            differentiate the files.
            </remarks>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Setting an invalid FilePathName structure will thrown an ArgumentException.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.OnStreamLoading(ThinkGeo.MapSuite.Layers.StreamLoadingEventArgs)">
            <summary>This method allows you to raise the StreamLoading event.</summary>
            <returns>None</returns>
            <remarks>
            This method allows you to raise the StreamLoading event. Normally events are not
            accessible to derived classes so we exposed a way to raise the event is necessary
            through this protected method.
            </remarks>
            <param name="e">
            This parameter represents the event arguments you want to raise the StreamLoading
            event with.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.OpenCore">
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method on a feature source which has already been opened it will throw an InvalidOperationException.</exception>
            <summary>
            This method opens the FeatureSource so that it is initialized and ready to
            use.
            </summary>
            <remarks>
            This protected virtual method is called from the concreate public method Open.
            The open method play an important role as it is responsible for initializing the
            FeatureSource. Most methods on the FeatureSource will throw an exception if the state
            of the FeatureSource is not opened. When the map draws each layer it will open the
            FeatureSource as one of its first steps, then after it is finished drawing with that
            layer it will close it. In this way we are sure to release all resources used by the
            FeatureSource.<br/>
            	<br/>
            When implementing this abstract method consider opening files for file based source,
            connecting to databases in the database based sources and so on. You will get a chance
            to close these in the Close method of the FeatureSource.
            </remarks>
            <returns>None</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CloseCore">
            <summary>
            This method opens the FeatureSource so that it is initialized and ready to
            use.
            </summary>
            <returns>None</returns>
            <remarks>
            This protected virtual method is called from the concreate public method Close.
            The close method plays an important role in the life cycle of the FeatureSource. It may
            be called after drawing to release any memory and other resources that were allocated
            since the Open method was called.<br/>
            	<br/>
            It is recommended that if you override this method that you take the following things
            into account. This method may be called multiple times so we suggest you write the so
            that that a call to a closed FeatureSource is ignored and does not generate an error.
            We also suggest that in the close you free all resources that have been opened.
            Remember that the object will not be destroyed but will be re-opened possibly in the
            near future.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.GetBoundingBoxCore">
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">If the operation is done under source closed state it will throw a InvalidOperationException.</exception>
            <remarks>
            	<para>This protected virtual method is called from the concreate public method
                GetBoundingBox. It does not take into account any transaction activity as this is
                the responsibility of the concreate public method GetBoundingBox. In this way as a
                developer if you choose to override this method you do not have to consider
                transaction at all.<br/>
            		<br/>
                The default implementation of GetBoundingBoxCore uses the GetAllRecordsCore method
                to calculate the bounding box of the FeatureSource. We strongly recommend that you
                provide your own implementation for this method that will be more efficient<br/>
            		<br/>
                If you do not override this method the means it gets the BoundingBox is by calling
                the GetAllFeatureCore method and deriving it from each feature. This is a very
                inefficient way to get the BoundingBox in most data sources. It is highly
                recommended that you override this method and replace it with a highly optimized
                version. For example in a ShapeFile the BoundingBox is in the main header of the
                file. Similarly if you are using Oracle Spatial you can execute a simple query to
                get the BoundingBox of all of the record without returning them. In these ways you
                can greatly improve the performance of this method.</para>
            </remarks>
            <summary>
            This method returns the bounding box which encompasses all of the features in the
            FeatureSource.
            </summary>
            <returns>
            This method returns the bounding box which encompasses all of the features in the
            FeatureSource.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.GetAllFeaturesCore(System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method on a feature source which has not been opened it will throw an InvalidOperationException.</exception>
            <summary>This method returns all of the InternalFeatures in the FeatureSource.</summary>
            <returns>
            The return decimalDegreesValue is a collection of all of the InternalFeatures in the
            FeatureSource.
            </returns>
            <remarks>
            This method returns all of the InternalFeatures in the FeatureSource. You will not need
            to consider anything about pending transactions as this will be handled in the non Core
            version of the method.<br/>
            	<br/>
            The main purpose of this method is to be the anchor of all of our default virtual
            implementations within this class. We wanted as the framework developers to provide you
            the user with as much default virtual implementation as possible. To do this we needed
            a way to get access to all of the features. For example, we want to create a default
            implementation for finding all of the InternalFeatures in a bounding box. Because this is an
            abstract class we do not know the specifics of the underlying data or how its spatial
            indexes work. What we do know is that if we get all the records then we can brute force
            the answer. In this way if you inherited form this class and only implemented this one
            method we can provide default implementations for virtually every other API.<br/>
            	<br/>
            While this is nice for you the developer if you decide to create your own FeatureSource
            it comes with a price. The price is that it is very inefficient. In the case we just
            discussed about finding all of the InternalFeatures in a bounding box we would not want to look
            at every record to fulfil this method. Instead we would want to override the
            GetFeaturesInsideBoundingBoxCore and implement specific code that would be fast. For
            example in Oracle Spatial there is a specific SQL statement to do this operation very
            quickly. The same holds true with other specific FeatureSource examples.<br/>
            	<br/>
            Most default implementations in the FeatureSource call the
            GetFeaturesInsideBoundingBoxCore which by default calls the GetAllFeaturesCore. It is
            our advice that if you create your own FeatureSource that you ALWAYS override the
            GetFeatureInsideBoundingBox. It will ensure that nearly every other API will operate
            efficiently. Please see the specific API to determine what method it uses.
            </remarks>
            <param name="returningColumnNames">
            This parameter allows you to select the field names of the column data you wish
            to return with each Feature.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.GetFeaturesInsideBoundingBoxCore(ThinkGeo.MapSuite.Shapes.RectangleShape,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method on a feature source which has not been opened it will throw an InvalidOperationException.</exception>
            <summary>
            This method returns all of the InternalFeatures of this FeatureSource inside of the
            specified bounding box.
            </summary>
            <returns>
            The return decimalDegreesValue is a collection of all of the InternalFeatures that are inside of the
            bounding box.
            </returns>
            <remarks>
            This method returns all of the InternalFeatures of this FeatureSource inside of the
            specified bounding box. If you are overriding this method you will not need to consider
            anything about transactions as this is handled by the concreate version of this
            method.<br/>
            	<br/>
            The default implementation of GetFeaturesInsideBoundingBoxCore uses the
            GetAllRecordsCore method to determine which InternalFeatures are inside of the bounding box. We
            strongly recommend that you provide your own implementation for this method that will
            be more efficient. It is especially important for this method as many other default
            virtual methods use this for their calculations. We highly recommend when you override
            this method that you use any spatial indexes you have at your disposal to make this
            method as fast as possible.
            </remarks>
            <param name="boundingBox">
            This parameter represents the bounding box you with to find InternalFeatures inside
            of.
            </param>
            <param name="returningColumnNames">
            This parameter allows you to select the field names of the column data you wish
            to return with each Feature.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.GetColumnsCore">
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method on a feature source which has not been opened it will throw an InvalidOperationException.</exception>
            <summary>This method returns the columns available for the FeatureSource.</summary>
            <remarks>
            As this is the abstract core version of the Columns method it is intended to
            be overridden in inherited version of the class. When overriding you will be
            responsible for getting a list of all of the columns supported by the FeatureSource. In
            this way the FeatureSource will know what columns are available and will remove any
            extra columns when making calls to other core methods. For example if you have a
            FeatureSource that has three columns of information and the user calls a method and
            requests four columns of information, something they can do with custom fields, we will
            first compare what they are asking for to the results of the GetColumnsCore. In this
            way we can strip out custom columns before calling other Core methods which are only
            responsible for returning data in the FeatureSource. For more information on custom
            fields you can see the documentation on the OnCustomFieldsFetch.
            </remarks>
            <returns>This method returns the columns available for the FeatureSource.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.String)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.ReturningColumnsType,System.String,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="returningColumnType">This parameter specifies whether the columns info in shape file will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String,System.Double)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.CreateTinyGeoFile(System.String,System.String,ThinkGeo.MapSuite.GeographyUnit,System.Collections.Generic.IEnumerable{System.String},System.String,System.Double,System.Text.Encoding)">
            <summary>
            Static API to create a new TinyGeo file from an existed shape file.
            </summary>
            <param name="tinyGeoPathFilename">This parameter specifies the file name for the target TinyGeo file.</param>
            <param name="shapePathFilename">This parameter specifies the file name for the existed shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit of the data.</param>
            <param name="columnNames">This parameter specifies the columns in shape file which will be copied to TinyGeo file.</param>
            <param name="password">This parameter spcifies the password of the target TinyGeo file.</param>
            <param name="precisionInMeter">This parameter spcifies in double what is the precision in Meter of the target TinyGeo file. </param>
            <param name="shapeEncoding">This parameter specifies the encoding of the existed shape file.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.GetOptimalPrecision(System.String,ThinkGeo.MapSuite.GeographyUnit,ThinkGeo.MapSuite.Shapes.DistanceUnit,ThinkGeo.MapSuite.Layers.TinyGeoPrecisionMode)">
            <summary>
            Get the precision of a shape file for creating a tinyGeo file.
            </summary>
            <param name="shapePathFilename">This parameter specifies the file name for the shape file.</param>
            <param name="unitOfData">This parameter specifies the Geography Unit for the shape file.</param>
            <param name="returningDistanceUnit">This parameter specifies the Distance Unit for the return precision.</param>
            <param name="precisionMode">This parameter specifies the mode of getting the return precision.</param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.EncryptTinyGeoFile(System.String,System.String,System.String)">
            <summary>
            Encrypt an existed TinyGeo File and save it as a new TinyGeo File.
            </summary>
            <param name="unencryptedTinyGeoPathFilename">This parameter specifies the file name for the source unencrypted TinyGeo file.</param>
            <param name="encryptedTinyGeoPathFilename">This parameter specifies the file name for the target encrypted TinyGeo file.</param>
            <param name="password">This parameter specified the password of the target encrypted TinyGeo file. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.Layers.TinyGeoFeatureSource.DecryptTinyGeoFile(System.String,System.String,System.String)">
            <summary>
            Decrypt an existed encrypted TinyGeo File and save it as a new TinyGeo File.
            </summary>
            <param name="encryptedTinyGeoPathFilename">This parameter specifies the file name for the source encrypted TinyGeo file.</param>
            <param name="decryptedTinyGeoPathFilename">This parameter specifies the file name for the target decrypted TinyGeo file.</param>
            <param name="password">This parameter specified the password of the source encrypted TinyGeo file. </param>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.TinyGeoFileType.Point">
            <summary>Point</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.TinyGeoFileType.Polyline">
            <summary>Polyline</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.Layers.TinyGeoFileType.Polygon">
            <summary>Polygon</summary>
        </member>
    </members>
</doc>
